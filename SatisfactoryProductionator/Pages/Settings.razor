@page "/settings"

@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels;
@using SatisfactoryProductionator.Services;

@inject CodexState CodexState
@inject CodexMenuState CodexMenuState

@implements IDisposable

<style type="text/css">

    .codex-main-panel {
        position: absolute;
        top: 14px;
        left: 275px;
        right: 14px;
        bottom: 14px;
        --aug-border-all: 3px;
        --aug-border-bg: var(--sfBlue);
        --aug-tl: 15px;
        --aug-tr: 33px;
        --aug-br: 33px;
        --aug-bl: 20px;
    }

    .codex-main-panel-inner {
        position: absolute;
        margin-right: 16px;
        top: 27px;
        left: 20px;
        height: 100%;
        overflow: scroll;
    }


        .codex-main-panel-inner::-webkit-scrollbar {
        width: 1em;
    }

        .codex-main-panel-inner::-webkit-scrollbar-track {
            background: var(--sfBlue40);
        border-radius: 16px;
        margin-block: 5em;
        margin-block-start: 5em;
    }

        .codex-main-panel-inner::-webkit-scrollbar-thumb {
        
        border-radius: 100vh;
            background: var(--sfBlue40);
    }
</style>



<div data-augmented-ui-reset></div>
<CodexMenu />

<div data-augmented-ui="tl-2-clip-x tr-clip br-clip bl-2-clip-y border" class="codex-main-panel">

    <div class="codex-main-panel-inner">
        @if (CodexState.Codex == null)
        {
            <div>Loading.....</div>
        }
        else
        {
            <table>
                @foreach (var group in GetCategoryItems())
                {
                    <CodexGroup itemGroup="group" />
                }
            </table>
        }
    </div>
</div>



@code {

    private static AppSettings _settings = new AppSettings();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        CodexState.OnStateChange += StateHasChanged;
        CodexMenuState.OnStateChange += StateHasChanged;

        if (CodexState.Codex == null)
        {
            await CodexState.InitializeCodexAsync();
        }
    }

    public void Dispose()
    {
        CodexState.OnStateChange -= StateHasChanged;
        CodexMenuState.OnStateChange -= StateHasChanged;
    }

    private List<IGrouping<CodexItemType, CodexItem>> GetCategoryItems()
    {
        var category = CodexMenuState.SelectedCategory;

        var items = CodexState.Codex.CodexItems.Where(x => x.CodexCategory == category).OrderBy(x => x.CodexItemType).GroupBy(x => x.CodexItemType).ToList();

        return items;
    }
}

@page "/items"
@using SatisfactoryProductionator.DataParser
@using SatisfactoryProductionator.DataModels.Models
@using SatisfactoryProductionator.DataModels.Enums
@using SatisfactoryProductionator.DataManager
@inject HttpClient Http

<link rel="stylesheet" type="text/css" href="css/augmented-ui/augmented-ui.min.css" />

<PageTitle>Items</PageTitle>

@if (DataAggregator.Items.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <div data-augmented-ui-reset></div>

    <div data-augmented-ui="tl-clip br-clip bl-clip border" class="quick-nav">
        <div data-augmented-ui-reset>
            <div data-augmented-ui="tl-clip br-clip border" class="quick-nav-title">
                <div class="quick-nav-title-q">Q</div>
                <div class="quick-nav-title-nav">Nav</div>
            </div>
            <ul class="quick-nav-list">
                @foreach (var group in GroupItems())
                {
                    <li class="quick-nav-list-item">
                        <button type="button" class="quick-nav-list-item-button" onclick="document.getElementById('@group.Key').scrollIntoView({behavior:'smooth'})">
                            <div class="quick-nav-list-item-button-text">@FormatCategoryName(group.Key.ToString()!)</div>
                        </button>
                    </li>
                }
            </ul>
        </div>
    </div>

    <div data-augmented-ui-reset class="main-panel">
        @foreach (var group in GroupItems())
        {
            <div data-augmented-ui="tl-clip tr-2-clip-x br-clip bl-clip border" class="main-panel-category">
                <div id=@group.Key class="main-panel-category-header">
                    @FormatCategoryName(group.Key.ToString()!)
                </div>
                @foreach (var item in @group)
                {
                    <button class="main-panel-category-button" type="button" @onclick="@(() => AddItemRecipe(@item.DisplayName!))">
                        <div data-augmented-ui="tl-clip tr-2-clip-y br-clip bl-2-clip-x border" class="main-panel-category-button-item">
                            <img src=@GetIconLocation(item.DisplayName!) alt=@item.DisplayName />
                            <div class="main-panel-category-button-item-name">
                                @FormatDisplayName(item.DisplayName!)
                            </div>
                        </div>
                    </button>
                }
            </div>
        }
    </div>

    <div data-augmented-ui-reset class=@CssIsInfoPanelActive()>
        <div data-augmented-ui="tl-2-clip-y tr-2-clip-x br-2-clip-y bl-2-clip-x border" class="info-panel">
            <div data-augmented-ui-reset></div>
            @if (_currentItem == null)
            {
                <p class="info-panel-no-item"> No Items Selected</p>
            }
            else
            {
                <div data-augmented-ui="tl-2-clip-y tr-2-clip-x br-clip b-clip-x bl-clip border" class="info-panel-top">

                    <div data-augmented-ui-reset class="info-panel-top-header">
                        <div class="info-panel-top-header-name">@FormatDisplayName(_currentItem.DisplayName!)</div>
                        <div class="info-panel-top-header-buttons">
                            <button type="button" class="info-panel-top-header-buttons-clear">
                                <div data-augmented-ui="all-hex border" class="info-panel-top-header-buttons-button" @onclick=@ClearInfoPanel>
                                    <span class="info-panel-top-header-buttons-icon oi-trash" aria-hidden="true"></span>
                                </div>
                            </button>

                            <button type="button" disabled=@IsDisplayPreviousInactive class="info-panel-top-header-buttons-nav">
                                <div data-augmented-ui="all-hexangle-left border" class="info-panel-top-header-buttons-button" @onclick=@DisplayPrevious></div>
                            </button>

                            <button type="button" disabled=@IsDisplayNextInactive class="info-panel-top-header-buttons-nav">
                                <div data-augmented-ui="all-hexangle-right border" class="info-panel-top-header-buttons-button" @onclick=@DisplayNext></div>
                            </button>

                            <button type="button" class="info-panel-top-header-buttons-close">
                                <div data-augmented-ui="all-hex border" class="info-panel-top-header-buttons-button" @onclick=@CloseInfoPanel>
                                    <span class="info-panel-top-header-buttons-icon oi-x" aria-hidden="true"></span>
                                </div>
                            </button>
                        </div>
                    </div>

                    <div class="info-panel-top-data">
                        <img class="info-panel-top-data-image" src=@GetIconLocation(_currentItem.DisplayName!) alt=@_currentItem.DisplayName />
                        <div class="info-panel-top-data-description">
                            <p>@_currentItem.Description</p>
                            @if (_currentItem.FormType == FormType.Solid)
                            {
                                <p>Stack.Size :: @_currentItem.StackSize</p>
                            }
                            @if (@_currentItem.EnergyValue > 0)
                            {
                                <p>MJ.Rating :: @_currentItem.EnergyValue</p>
                            }
                            @if (@_currentItem.ResourceSinkPoints > 0)
                            {
                                <p>Resource.Sink.Points :: @_currentItem.ResourceSinkPoints</p>
                            }
                            else
                            {
                                <p>Caution :: Cannot Sink!</p>
                            }
                        </div>
                    </div>
                </div>

                <div data-augmented-ui-reset></div>
                <div data-augmented-ui="tl-clip tr-clip br-clip bl-2-clip-x border" class="info-panel-recipe">
                    @if (_currentRecipePage == null)
                    {
                        <p class="info-panel-no-recipe-message">No Recipes </p>
                    }
                    else
                    {
                        <table class="info-panel-recipe-table">
                            @for (var i = 0; i < GetPageLoops(); i++)
                            {
                                @if (i == 1)
                                {
                                    AdjustMainPage(1);
                                }
                                <tr>
                                    <td colspan="4" class="info-panel-recipe-header">@_currentRecipePage!.PageType</td>
                                </tr>
                                @foreach (var recipe in _currentRecipePage.Recipes!)
                                {
                                    <tr>
                                        <td class="info-panel-recipe-name">@FormatDisplayName(recipe.DisplayName!)</td>
                                        <td>
                                            <table>
                                                <tr>
                                                    @foreach (var item in recipe.Inputs!)
                                                    {
                                                        <td>
                                                            <button class="main-panel-category-button info-panel-recipe-button" type="button" @onclick="@(() => AddItemRecipe(@item.Key!))">
                                                                <img class="info-panel-recipe-image" src=@GetIconLocation(item.Key) alt=@item.Key />
                                                                <div class="info-panel-recipe-quantity">@Math.Round(item.Value[1], 2)/min</div>
                                                            </button>
                                                        </td>
                                                    }
                                                </tr>
                                            </table>
                                        </td>
                                        <td> >>> </td>
                                        <td>
                                            <table>
                                                <tr>
                                                    @foreach (var item in recipe.Outputs!)
                                                    {
                                                        <td>
                                                            <button class="main-panel-category-button info-panel-recipe-button" type="button" @onclick="@(() => AddItemRecipe(@item.Key!))">
                                                                <img class="info-panel-recipe-image" src=@GetIconLocation(item.Key) alt=@item.Key />
                                                                <div class="info-panel-recipe-quantity">@Math.Round(item.Value[1], 2)/min</div>
                                                            </button>
                                                        </td>
                                                    }
                                                </tr>
                                            </table>
                                        </td>
                                    </tr>
                                }
                                @if (i == 1)
                                {
                                    AdjustMainPage(-1);
                                }
                            }
                        </table>
                        <div data-augmented-ui-reset class="info-panel-recipe-paging">
                            <div class="info-panel-recipe-paging-pages">
                                @for (var i = 0; i < GetPageCount(); i++)
                                {
                                    <div class=@ParseCssPageLight(i)></div>
                                }
                            </div>
                            <div class="info-panel-recipe-paging-nav">
                                <button type="button" class="info-panel-recipe-paging-nav-button" @onclick=@InfoPageLeft>
                                    <span class="info-panel-paging-nav-icon oi-caret-left" aria-hidden="true"></span>
                                </button>
                                <button type="button" class="info-panel-recipe-paging-nav-button" @onclick=@InfoPageRight>
                                    <span class="info-panel-paging-nav-icon oi-caret-right" aria-hidden="true"></span>
                                </button>
                            </div>
                        </div>
                    }
                </div>

                <div data-augmented-ui="tl-clip tr-clip br-2-clip-y bl-clip border" class="info-panel-options">
                    <div style="padding:20px; margin:10px;font-size:1.2rem;color: red;">
                        <p> UNDER CONSTRUCTION</p>
                        <p>Needs Grapher, Permutator, and Recipe Pages completed</p>
                        <p>Grapher - Options to set amount of current item and navigate to Grapher</p>
                        <p>Grapher - Options to set amount and add to desired outputs to Grapher (No navigating to page - sort of like a shopping cart)</p>
                        <p>Permutator - Set amount and generate all permutations on permutator page</p>
                        <p>Recipes - Link to current item on Recipe page if more details are needed (Current item display has minimal information)</p>
                    </div>
                </div>
                @*</div>*@
            }
            @*</div>*@
        </div>
    </div>
}

@code {
    private static Item? _currentItem;
    private static ItemRecipes? _currentItemRecipes;
    private static RecipePage? _currentRecipePage;
    private static Stack<Item>? _previousStack;
    private static Stack<Item>? _nextStack;
    private static Dictionary<string, ItemRecipes>? _itemRecipeCache;

    private static bool _isInfoPanelActive;
    private static bool IsDisplayPreviousInactive => _previousStack?.Count == 0;
    private static bool IsDisplayNextInactive => _nextStack?.Count == 0;
    private static bool IsMainPage => _currentRecipePage!.PageType is PageType.Basics or PageType.Alternates;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            _previousStack ??= new Stack<Item>();
            _nextStack ??= new Stack<Item>();
            _itemRecipeCache ??= new Dictionary<string, ItemRecipes>();
        });
    }

    private static void AddItemRecipe(string name)
    {
        if (_currentItem != null && _currentItem.DisplayName == name)
        {
            _isInfoPanelActive = true;
            return;
        }

        if (_currentItem != null)
        {
            _previousStack?.Push(_currentItem);
        }

        _nextStack?.Clear();

        if (_itemRecipeCache == null || !_itemRecipeCache!.ContainsKey(name))
            _itemRecipeCache![name] = ItemRecipesGenerator.GetItemRecipes(name)!;

        _currentItemRecipes = _itemRecipeCache[name];
        _currentRecipePage = (_currentItemRecipes.Pages!.Count > 0) ? _currentItemRecipes.Pages?[_currentItemRecipes.PageIndex] : null;

        _currentItem = DataAggregator.Items.Find(x => x.DisplayName == name)!;
        _isInfoPanelActive = true;
    }

    private static IEnumerable<IGrouping<ItemType?, Item>> GroupItems() => DataAggregator.Items.OrderBy(x => x.Category).ThenBy(x => x.DisplayName).GroupBy(x => x.Category);

    private static void SetRecipePage(int index)
    {
        if (index == 0)
            _currentRecipePage = _currentItemRecipes!.Pages?[0];
        else if (_currentItemRecipes!.HasDoubleMainPage)
            _currentRecipePage = _currentItemRecipes!.Pages?[index + 1];
        else
            _currentRecipePage = _currentItemRecipes!.Pages?[index];

        _currentItemRecipes!.PageIndex = index;
    }

    private static int GetPageCount()
    {
        var count = _currentItemRecipes!.Pages!.Count;

        return _currentItemRecipes.HasDoubleMainPage ? --count : count;
    }

    private static int GetPageLoops()
    {
        if (!IsMainPage) return 1;

        return _currentItemRecipes!.HasDoubleMainPage ? 2 : 1;
    }

    private static void AdjustMainPage(int bump)
    {
        _currentItemRecipes!.PageIndex += bump;
        _currentRecipePage = _currentItemRecipes.Pages?[_currentItemRecipes.PageIndex];

    }

    /*Info Panel Main Buttons*/
    #region

    private static void DisplayPrevious()
    {
        if (IsDisplayPreviousInactive) return;

        _nextStack?.Push(_currentItem!);
        _currentItem = _previousStack?.Pop();
        _currentItemRecipes = _itemRecipeCache?[_currentItem!.DisplayName!];
        SetRecipePage(_currentItemRecipes!.PageIndex);
    }

    private static void DisplayNext()
    {
        if (IsDisplayNextInactive) return;

        _previousStack?.Push(_currentItem!);
        _currentItem = _nextStack?.Pop();
        _currentItemRecipes = _itemRecipeCache?[_currentItem!.DisplayName!];
        SetRecipePage(_currentItemRecipes!.PageIndex);
    }

    private static void CloseInfoPanel()
    {
        _isInfoPanelActive = false;
    }

    private static void ClearInfoPanel()
    {
        _isInfoPanelActive = false;
        _currentItem = null;
        _currentItemRecipes = null;
        _itemRecipeCache?.Clear();
        _previousStack = new Stack<Item>();
        _nextStack = new Stack<Item>();

    }

    #endregion

    /*Recipe Page Nav Buttons*/
    #region

    private static void InfoPageLeft()
    {
        var pageCount = GetPageCount();
        var index = _currentItemRecipes!.PageIndex;
        index--;

        if (index < 0)
            index = pageCount - 1;

        SetRecipePage(index);
    }

    private static void InfoPageRight()
    {
        var pageCount = GetPageCount();
        var index = _currentItemRecipes!.PageIndex;
        index++;

        if (index > pageCount - 1)
            index = 0;

        SetRecipePage(index);
    }

    #endregion

    /*CSS Methods*/
    #region

    private static string ParseCssPageLight(int i) => _currentItemRecipes!.PageIndex == i ? "info-panel-recipe-paging-pages-light info-panel-recipe-paging-pages-light-on" : "info-panel-recipe-paging-pages-light info-panel-recipe-paging-pages-light-off";

    private static string CssIsInfoPanelActive() => _isInfoPanelActive ? "info-panel-on" : "info-panel-off";

    #endregion

    /*String Formatters*/
    #region

    private static string GetIconLocation(string name) => $"icons/{name.Replace(" ", "").Replace("-", "").Replace(".", "")}_256.png";

    private static string FormatCategoryName(string name)
    {
        for (int i = name.Length - 1; i > 0; i--)
        {
            if (char.IsUpper(name[i]))
            {
                name = name.Insert(i, ".");
            }
        }
        return name;
    }

    private static string FormatDisplayName(string name)
    {
        name = name.Replace(Constants.ALTERNATE_PREFIX, "");
        return name.Replace(" - ", "-").Replace(" ", ".");
    }

    #endregion
}

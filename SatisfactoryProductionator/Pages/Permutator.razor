@page "/permutator"
@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.Services;
@using SatisfactoryProductionator.Services.States;

@inject MenuState MenuState
@inject AppModalState AppModalState
@inject CodexState CodexState
@inject PermState PermState

@implements IDisposable

<div data-augmented-ui-reset></div>
@{
    MenuState.SetPage(Page.Perm);
    AppModalState.SetModal(ModalType.Perm);
}

<div class="pos-abs">
    @if (CodexState.Codex == null)
    {
        <div class="pos-abs loading">Generating Codex .....</div>
    }
    else
    {
        <div data-augmented-ui="tl-2-clip-x tr-clip br-2-clip-x bl-clip border" class="pos-abs filters-wrapper"></div>

        <div data-augmented-ui="br-2-clip-y bl-2-clip-x border" class="pos-abs frozen-wrapper"></div>

        <div data-augmented-ui=" tl-2-clip-y tr-2-clip-x br-clip bl-2-clip-y border" class="pos-abs perm-wrapper">
            @if (!PermState.Permutations.Any())
            {
                <div class="pos-abs loading">Permutating .....</div>
            }
            else
            {
                <table class="perm-table">
                @* <thead>
                    <tr></tr>
                </thead> *@

                @foreach(var permutation in PermState.Permutations)
                    {
                                            
                    }
                </table>
            }
        </div>

        
        
    }
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        MenuState.OnStateChange += StateHasChanged;
        AppModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
        PermState.OnStateChange += StateHasChanged;

        if (CodexState.Codex == null)
        {
            await CodexState.InitializeCodexAsync();
        }
    }

    public void Dispose()
    {
        MenuState.OnStateChange -= StateHasChanged;
        AppModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
        PermState.OnStateChange -= StateHasChanged;
    }

   
}

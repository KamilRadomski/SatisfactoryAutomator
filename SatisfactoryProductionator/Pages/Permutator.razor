@page "/permutator"
@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models.Graph;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services;
@using SatisfactoryProductionator.Services.States;

@inject MenuState MenuState
@inject AppModalState AppModalState
@inject CodexState CodexState
@inject PermState PermState

@implements IDisposable

<div data-augmented-ui-reset></div>
@{
    MenuState.SetPage(Page.Perm);
    AppModalState.SetModal(ModalType.Perm);
}

<div class="pos-abs">
    @if (CodexState.Codex == null)
    {
        <div class="pos-abs loading">Generating Codex .....</div>
    }
    else
    {
        <div data-augmented-ui="tl-2-clip-x tr-clip br-2-clip-x bl-clip border" class="pos-abs filters-wrapper">
            <div class="temp">Filters + Options - TBD</div>
        </div>

        <div data-augmented-ui="br-2-clip-y bl-2-clip-x border" class="pos-abs frozen-wrapper"></div>

        <div data-augmented-ui="tl-clip tr-clip br-clip bl-2-clip-y border" class="pos-abs perm-wrapper">
            @if (!PermState.Permutations.Any())
            {
                <div class="pos-abs loading">Add Items To Permutate .....</div>
            }
            else
            {
                <div data-augmented-ui-reset></div>

                <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="page-wrapper">
                    <div class="table-wrapper">
                        <table class="perm-table">
                            <thead class="divider">
                                <tr>
                                    <th>Options</th>
                                    <th>Inputs</th>
                                    <th>Outputs</th>
                                    <th>Power</th>
                                    <th>Items</th>
                                    <th>Buildings</th>
                                    <th>Building Cost</th>
                                </tr>
                            </thead>

                            @foreach (var permutation in PermState.GetView())
                            {
                                <div data-augmented-ui-reset></div>
                                <tr data-augmented-ui="tl-clip tr-clip bl-clip br-clip border" class="perm-row">

                                    @* Options *@
                                    <td class="divider">
                                        <div class="text">Options</div>
                                    </td>

                                    @* Inputs *@
                                    <td class="divider">
                                        <div class="content-wrapper">
                                            <table class="w100">
                                                <tr>
                                                    <td>
                                                        <div class="flex-wrap flex-center item-list">
                                                            @foreach (var (input, data) in permutation.Inputs)
                                                            {
                                                                <button class="image-button" type="button" @onclick="@(e => OnClickInputs(e, input.ClassName))">
                                                                    <div class="flex-col flex-left m10">
                                                                        <div class="flex self-align">
                                                                            <img class="image-48" src=@input.IconPath alt=@input.DisplayName />
                                                                            <div class="text">@Math.Round(data.Quantity,2)</div>
                                                                        </div>
                                                                        <div class="text">@GetInputText(input)</div>
                                                                    </div>
                                                                </button>
                                                            }
                                                        </div>
                                                    </td>
                                                </tr>
                                            </table>
                                        </div>
                                    </td>

                                    @* Outputs *@
                                    <td class="divider">
                                        <table class="w100">
                                            <tr>
                                                <td>
                                                    <div class="flex-wrap flex-center flex-col item-list">
                                                        @foreach (var (output, data) in permutation.Outputs)
                                                        {
                                                            <div class="flex-col flex-middle m10">
                                                                <div class="flex self-align">
                                                                    <img class="image-48" src=@output.IconPath alt=@output.DisplayName />
                                                                    <div class="text">@Math.Round(data.Quantity,2)</div>
                                                                </div>
                                                                <div class="text">@data.Recipe.DisplayName.FormatDisplayName()</div>
                                                                <div class="text">x @Math.Round(data.RecipeQuantity,2)</div>
                                                            </div>
                                                        }

                                                    </div>
                                                </td>
                                            </tr>
                                        </table>
                                    </td>

                                    @* Power *@
                                    <td class="divider">
                                        <table class="w100">
                                            <tr>
                                                <td>

                                                    <div class="flex-col flex-middle m10 item-list">
                                                        <div class="flex self-align">
                                                            <img class="image-80" src=@CodexState.FetchIconPath("GeneratorFuel") alt="GeneratorFuel" />
                                                            <img class="image-48 img-down" src=@CodexState.FetchIconPath("LiquidFuel") alt="GeneratorFuel" />
                                                        </div>
                                                        <div class="text">@Math.Round(permutation.Power, 2) MW</div>
                                                        <div class="text">@Math.Round(GetFuelConsumption(permutation.Power), 2) /Min</div>
                                                    </div>
                                                </td>
                                            </tr>
                                        </table>
                                    </td>

                                    @* Items *@
                                    <td class="divider">
                                        <table class="w100">
                                            <tr>
                                                <td>
                                                    <div class="flex-wrap flex-center item-list">
                                                        @foreach (var (item, data) in permutation.Items)
                                                        {
                                                            <button class="image-button" type="button" @onclick="@(e => OnClickItems(e, item.ClassName, data.Recipe.ClassName))">
                                                                <div class="flex-col flex-middle m10">
                                                                    <div class="flex self-align">
                                                                        <img class="image-48" src=@item.IconPath alt=@item.DisplayName />
                                                                        <div class="text">@Math.Round(data.Quantity,2)</div>
                                                                    </div>
                                                                    <div class="text">@data.Recipe.DisplayName.FormatDisplayName()</div>
                                                                    <div class="text">x @Math.Round(data.RecipeQuantity,2)</div>
                                                                </div>
                                                            </button>
                                                        }
                                                    </div>
                                                </td>
                                            </tr>
                                        </table>
                                    </td>

                                    @* Buildings *@
                                    <td class="divider">
                                        <table class="w100">
                                            <tr>
                                                <td>
                                                    <div class="flex-wrap flex-center item-list">
                                                        @foreach (var (building, quantity) in permutation.Buildings)
                                                        {
                                                             <button class="image-button" type="button" @onclick="@(e => OnClickBuildings(e, building.ClassName))">
                                                            <div class="flex-col flex-middle m10">
                                                                <div class="flex self-align">
                                                                    <img class="image-48" src=@building.IconPath alt=@building.ClassName />
                                                                    <div class="text"> @quantity</div>
                                                                </div>
                                                                <div class="text">@building.DisplayName.FormatDisplayName()</div>

                                                            </div>
                                                            </button>
                                                        }
                                                    </div>
                                                </td>
                                            </tr>
                                        </table>
                                    </td>

                                    @* Infra Cost *@
                                    <td>
                                        <table class="w100">
                                            <tr>
                                                <td>
                                                    <div class="flex-wrap flex-center item-list">
                                                        @foreach (var (item, quantity) in permutation.Cost)
                                                        {
                                                             <button class="image-button" type="button" @onclick="@(e => OnClickInfra(e, item.ClassName))">
                                                            <div class="flex-col flex-left m10">
                                                                <div class="flex self-align">
                                                                    <img class="image-48" src=@item.IconPath alt=@item.ClassName />
                                                                    <div class="text">@Math.Round(quantity,2)</div>
                                                                </div>
                                                                <div class="text">@item.DisplayName.FormatDisplayName()</div>
                                                            </div>
                                                            </button>
                                                        }
                                                    </div>
                                                </td>
                                            </tr>
                                        </table>
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                </div>

                <div class="footer-wrapper">
                    <div class="stats-box">
                        <div class="stats">@GetPermStat()</div>
                        <div class="incomplete @IsComplete()">Incomplete Permutations! - Please import items or exclude recipes</div>
                    </div>
                    @if (PermState.GetPageCount() > 1)
                    {
                        <div class="pagination-box">
                            <div class="pages">@GetPageStat()</div>
                            <div class="page-nav">
                                <button type="button" class="nav-btn" @onclick=@(() => PermState.SetPageLeft())>
                                    <span class="nav-icon oi-caret-left" aria-hidden="true"></span>
                                </button>
                                <button type="button" class="nav-btn" @onclick=@(() => PermState.SetPageRight())>
                                    <span class="nav-icon oi-caret-right" aria-hidden="true"></span>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>



    }
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        MenuState.OnStateChange += StateHasChanged;
        AppModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
        PermState.OnStateChange += StateHasChanged;

        if (CodexState.Codex == null)
        {
            await CodexState.InitializeCodexAsync();
        }
    }

    public void Dispose()
    {
        MenuState.OnStateChange -= StateHasChanged;
        AppModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
        PermState.OnStateChange -= StateHasChanged;
    }

    private void OnClickInputs(MouseEventArgs e, string className)
    {
        if (e.ShiftKey)
        {
            if (PermState.Imports.Contains(className))
            {
                PermState.Imports.Remove(className);
                PermState.GeneratePermutations(false);
            }
            else
            {
                PermState.Imports.Add(className);
                PermState.GeneratePermutations(false);
            }
        }
        else
        {
            if (PermState.Filters.Inputs.Contains(className))
            {
                PermState.Filters.Inputs.Remove(className);
                PermState.RemoveFilter(FilterType.Input);
            }
            else
            {
                PermState.ApplyFilter(FilterType.Input, className);
            }
        }

    }

    private void OnClickItems(MouseEventArgs e, string className, string recipeName)
    {
        if (e.ShiftKey)
        {
            if (PermState.Imports.Contains(className))
            {
                PermState.Imports.Remove(className);
                PermState.GeneratePermutations(false);
            }
            else
            {
                PermState.Imports.Add(className);
                PermState.GeneratePermutations(false);
            }
        }
        else if(e.CtrlKey)
        {
            if (PermState.Filters.Items.Contains(className))
            {
                PermState.Filters.Items.Remove(className);
                PermState.RemoveFilter(FilterType.Item);
            }
            else
            {
                PermState.ApplyFilter(FilterType.Item, className);
            }
        }
        else
        {
            if (PermState.Filters.Recipes.Contains(recipeName))
            {
                PermState.Filters.Recipes.Remove(recipeName);
                PermState.RemoveFilter(FilterType.Recipe);
            }
            else
            {
                PermState.ApplyFilter(FilterType.Recipe, recipeName);
            }
        }
    }

    private void OnClickBuildings(MouseEventArgs e, string className)
    {

        if (PermState.Filters.Buildings.Contains(className))
        {
            PermState.Filters.Buildings.Remove(className);
            PermState.RemoveFilter(FilterType.Building);
        }
        else
        {
            PermState.ApplyFilter(FilterType.Building, className);
        }
    }

    private void OnClickInfra(MouseEventArgs e, string className)
    {

        if (PermState.Filters.Costs.Contains(className))
        {
            PermState.Filters.Costs.Remove(className);
            PermState.RemoveFilter(FilterType.Cost);
        }
        else
        {
            PermState.ApplyFilter(FilterType.Cost, className);
        }

    }

    private string IsComplete()
    {
        var completed = PermState.IsComplete();

        return completed ? "hidden" : "";
    }

    private List<Node> GetInputs(Permutation permutation)
    {
        return permutation.Nodes.Where(x => x.NodeType is NodeType.Input).OrderBy(x => x.Name).ToList();
    }

    private List<NodeStruct> GetOutputs(Permutation permutation)
    {
        var targetItems = PermState.Items;
        var items = new List<NodeStruct>();

        var byProducts = permutation.Nodes.Where(x => !string.IsNullOrEmpty(x.ByProduct))
        .GroupBy(node => node.ByProduct);

        foreach (var group in byProducts)
        {
            foreach (var node in group)
            {
                if (items.Any(x => x.Name == node.ByProduct))
                {
                    var nodeStruct = items.First(x => x.Name == node.ByProduct);
                    nodeStruct.ItemQuantity += node.ByProductQuantity;
                    nodeStruct.RecipeQuantity += node.RecipeQuantity;
                }
                else
                {
                    items.Add(new NodeStruct
                        {
                            Name = node.ByProduct,
                            ItemQuantity = node.ByProductQuantity,
                            Recipe = node.Recipe,
                            RecipeQuantity = node.RecipeQuantity
                        });
                }

            }
        }

        foreach (var item in targetItems)
        {
            var node = permutation.Nodes.First(x => x.Name == item.Key);

            var newQuantity = node.ItemQuantity - targetItems[item.Key];

            double recipeQuantity = 0;

            if (newQuantity == 0)
            {
                recipeQuantity = node.RecipeQuantity;
            }
            else
            {
                var ratio = targetItems[item.Key] / node.ItemQuantity;
                recipeQuantity = node.RecipeQuantity * ratio;
            }

            if (items.Any(x => x.Name == item.Key))
            {
                var nodeStruct = items.First(x => x.Name == item.Key);
                nodeStruct.ItemQuantity += targetItems[item.Key];
                nodeStruct.RecipeQuantity += recipeQuantity;
            }
            else
            {
                items.Add(new NodeStruct
                    {
                        Name = item.Key,
                        ItemQuantity = item.Value,
                        Recipe = node.Recipe,
                        RecipeQuantity = recipeQuantity
                    });
            }
        }

        return items;
    }

    private List<NodeStruct>
    GetItemsBuilt(Permutation permutation)
    {
        var targetItems = PermState.Items;

        var items = new List<NodeStruct>
            ();

        foreach (var item in permutation.Nodes.Where(x => x.NodeType is NodeType.Build).OrderBy(x => x.Name))
        {
            if (targetItems.ContainsKey(item.Name))
            {
                var newQuantity = item.ItemQuantity - targetItems[item.Name];

                if (newQuantity > 0)
                {
                    var ratio = newQuantity / item.ItemQuantity;
                    var newRecipeQuantity = item.RecipeQuantity * ratio;

                    items.Add(new NodeStruct
                        {
                            Name = item.Name,
                            ItemQuantity = newQuantity,
                            Recipe = item.Recipe,
                            RecipeQuantity = newRecipeQuantity
                        });

                }
            }
            else
            {
                items.Add(new NodeStruct
                    {
                        Name = item.Name,
                        ItemQuantity = item.ItemQuantity,
                        Recipe = item.Recipe,
                        RecipeQuantity = item.RecipeQuantity
                    });
            }
        }

        return items;
    }

    private double GetPowerTotal(Permutation permutation)
    {
        var powerUsed = permutation.Nodes.Sum(x => x.PowerUsed);

        return Math.Round(powerUsed, 1);
    }

    private Dictionary<string, double>
        GetTotalInfraCost(Permutation permutation)
    {
        var items = permutation.Nodes
        .SelectMany(node => node.InfraCost)
        .OrderBy(x => x.Key)
        .GroupBy(item => item.Key)
        .ToDictionary(group => group.Key, group => group.Sum(item => item.Value));

        return items;
    }

    private Dictionary<string, int>
        GetTotalBuildings(Permutation permutation)
    {
        var buildings = permutation.Nodes
        .OrderBy(x => x.Building)
        .GroupBy(node => node.Building)
        .ToDictionary(group => group.Key, group => group.Sum(node => node.BuildingQuantity));

        return buildings;
    }

    private double GetFuelConsumption(double power)
    {
        var gensNeeded = power / 150;
        return Math.Round(gensNeeded * 12, 2);
    }

    private List<PermData>
        GetCurrentPage()
    {
        var index = PermState.Index;
        var pageSize = PermState.PageSize;

        return PermState.Permutations.Skip(index * pageSize).Take(pageSize).ToList();
    }

    private string GetPermStat()
    {
        var active = PermState.Permutations.Where(x => x.Active).Count();
        var total = PermState.Permutations.Count();

        return $"{active} / {total} Active";
    }

    private string GetPageStat()
    {
        return $"Page {PermState.Index + 1} / {PermState.GetPageCount()}";
    }

    private string GetInputText(Item item)
    {
        var name = item.DisplayName.FormatDisplayName();

        if (PermState.TotalImports.Contains(item.ClassName))
        {
            return $"({name})";
        }
        else
        {
            return name;
        }
    }

}

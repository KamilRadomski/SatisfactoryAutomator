@page "/permutator"
@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.Services;

@inject MenuState MenuState
@inject AppModalState AppModalState
@inject CodexState CodexState
@inject PermState PermState

@implements IDisposable

<div data-augmented-ui-reset></div>
@{
    MenuState.SetPage(Page.Perm);
    AppModalState.SetModal(ModalType.Perm);
}

<div class="pos-abs">
    @if (CodexState.Codex == null)
    {
        <div class="pos-abs loading">Loading.....</div>
    }
    else
    {
        //Filters
        <div data-augmented-ui="tl-2-clip-x tr-clip br-2-clip-x bl-clip border" class="pos-abs filters-wrapper"></div>

        //FrozenRow

        <div data-augmented-ui="br-2-clip-y bl-2-clip-x border" class="pos-abs frozen-wrapper"></div>

        //Permutations
        <div data-augmented-ui=" tl-clip tr-2-clip-x br-clip bl-2-clip-y border" class="pos-abs perm-wrapper"></div>
    }
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        MenuState.OnStateChange += StateHasChanged;
        AppModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
        PermState.OnStateChange += StateHasChanged;

        if (CodexState.Codex == null)
        {
            await CodexState.InitializeCodexAsync();
        }
    }

    public void Dispose()
    {
        MenuState.OnStateChange -= StateHasChanged;
        AppModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
        PermState.OnStateChange -= StateHasChanged;
    }
}

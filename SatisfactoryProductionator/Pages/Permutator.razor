@page "/permutator"
@using SatisfactoryProductionator.Components.Pages.Permutator
@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.Services.States;

@inject MenuState MenuState
@inject AppModalState AppModalState
@inject CodexState CodexState

@implements IDisposable

<div data-augmented-ui-reset></div>
@{
    MenuState.SetPage(Page.Perm);
    AppModalState.SetModal(ModalType.Perm);
}

<div class="pos-abs">
    @if (CodexState.Codex == null)
    {
        <div class="pos-abs loading">Generating Codex .....</div>
    }
    else
    {
        <PermFilters />

        <PermDetail />

        <PermMain />
    }
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        MenuState.OnStateChange += StateHasChanged;
        AppModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;

        if (CodexState.Codex == null)
        {
            await CodexState.InitializeCodexAsync();
        }
    }

    public void Dispose()
    {
        MenuState.OnStateChange -= StateHasChanged;
        AppModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
    }
}

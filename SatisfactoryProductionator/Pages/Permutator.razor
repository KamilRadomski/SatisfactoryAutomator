@page "/permutator"
@using SatisfactoryProductionator.Components.Pages.Permutator
@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models.Graph;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services;
@using SatisfactoryProductionator.Services.States;

@inject MenuState MenuState
@inject AppModalState AppModalState
@inject CodexState CodexState
@inject PermState PermState

@implements IDisposable

<div data-augmented-ui-reset></div>
@{
    MenuState.SetPage(Page.Perm);
    AppModalState.SetModal(ModalType.Perm);
}

<div class="pos-abs">
    @if (CodexState.Codex == null)
    {
        <div class="pos-abs loading">Generating Codex .....</div>
    }
    else
    {
        <div data-augmented-ui="tl-2-clip-x tr-clip br-2-clip-x bl-clip border" class="pos-abs filters-wrapper @IsFilterOpen()">
            <div data-augmented-ui="t-clip br-clip bl-clip border" class="aug-btn filter-toggle @FilterCss">
                <button type="button" class="aug-btn" @onclick=@ToggleFilters></button>
            </div>

        </div>

        <div data-augmented-ui="br-2-clip-y bl-2-clip-x border" class="pos-abs details-wrapper @GetDetailSizing()">
            <div class="detail-row">
                @if (PermState.DetailRow != null)
                {
                    <PermTable IsDetailRow=true />
                }
            </div>
        </div>

        <div data-augmented-ui="tl-clip tr-clip br-clip bl-2-clip-y border" class="pos-abs perm-wrapper @GetPermSizing()">
            <div data-augmented-ui-reset></div>
            @if (!PermState.Permutations.Any())
            {
                <div class="pos-abs loading">Add Items To Permutate .....</div>
            }
            else
            {
                <PermTable IsDetailRow=false />

                <div class="footer-wrapper">
                    <div class="stats-box">
                        <div class="stats">@GetPermStat()</div>
                        <div class="incomplete @IsComplete()">Incomplete Permutations! - Please import items or exclude recipes</div>
                    </div>
                    @if (PermState.GetPageCount() > 1)
                    {
                        <div class="pagination-box">
                            <div class="pages">@GetPageStat()</div>
                            <div class="page-nav">
                                <button type="button" class="nav-btn" @onclick=@(() => PermState.SetPageLeft())>
                                    <span class="nav-icon oi-caret-left" aria-hidden="true"></span>
                                </button>
                                <button type="button" class="nav-btn" @onclick=@(() => PermState.SetPageRight())>
                                    <span class="nav-icon oi-caret-right" aria-hidden="true"></span>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>



    }
</div>

@code {
    public string FilterCss = "";

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        MenuState.OnStateChange += StateHasChanged;
        AppModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
        PermState.OnStateChange += StateHasChanged;

        if (CodexState.Codex == null)
        {
            await CodexState.InitializeCodexAsync();
        }
    }

    public void Dispose()
    {
        MenuState.OnStateChange -= StateHasChanged;
        AppModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
        PermState.OnStateChange -= StateHasChanged;
    }

    private string IsFilterOpen() => PermState.FiltersActive ? "filters-open" : "";

    private PermToggles GetPermToggles()
    {
        var filters = PermState.FiltersActive;
        var details = PermState.DetailActive;
        var expandedDetail = PermState.DetailsExpanded;

        if (!filters && !details)
        {
            return PermToggles.Default;
        }
        else if (filters)
        {
            if (!details)
            {
                return PermToggles.Filter;
            }
            if (details && !expandedDetail)
            {
                return PermToggles.FilterDetail;
            }
            if (details && expandedDetail)
            {
                return PermToggles.FilterDetailExpanded;
            }
        }
        else
        {
            if (details && !expandedDetail)
            {
                return PermToggles.Detail;
            }
            else
            {
                return PermToggles.DetailExpanded;
            }
        }

        return PermToggles.Default;
    }

    private string GetDetailSizing()
    {
        var filters = PermState.FiltersActive;
        var details = PermState.DetailActive;
        var expandedDetail = PermState.DetailsExpanded;

        if (!details)
        {
            return string.Empty;
        }

        if (filters)
        {
            if (expandedDetail)
            {
                return "filter-details-expanded";
            }
            else
            {
                return "filter-details-open";
            }
        }
        else
        {
            if (expandedDetail)
            {
                return "details-expanded";
            }
            else
            {
                return "details-open";
            }
        }
    }

    private string GetPermSizing()
    {
        var permToggle = GetPermToggles();

        return permToggle switch
        {
            PermToggles.Default => string.Empty,
            PermToggles.Filter => "perm-filter-on",
            PermToggles.FilterDetail => "perm-filter-details-on",
            PermToggles.FilterDetailExpanded => "perm-filter-expanded-on",
            PermToggles.Detail => "perm-details-on",
            PermToggles.DetailExpanded => "perm-expanded-on"
        };
    }

    private void ToggleFilters()
    {
        PermState.FiltersActive = !PermState.FiltersActive;

        if (PermState.FiltersActive)
        {
            FilterCss = "filter-up";
        }
        else
        {
            FilterCss = "filter-down";
        }
    }

    private string IsComplete()
    {
        var completed = PermState.IsComplete();

        return completed ? "hidden" : "";
    }

    private string GetPermStat()
    {
        var active = PermState.Permutations.Where(x => x.Active).Count();
        var total = PermState.Permutations.Count();

        return $"{active} / {total} Active";
    }

    private string GetPageStat()
    {
        return $"Page {PermState.Index + 1} / {PermState.GetPageCount()}";
    }
}

@page "/"

@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models
@using SatisfactoryProductionator.Services;
@using SatisfactoryProductionator.Services.States;

@inject HttpClient Http
@inject CodexState CodexState

@inject MenuState MenuState

@implements IDisposable

<div data-augmented-ui-reset></div>
@{
    MenuState.SetPage(Page.Home);
}


<PageTitle>Index</PageTitle>

<style type="text/css">
    .index-format {
        padding-left: 15px;
        padding-top: 10px;
    }

    .c {
        color: red;
    }

    .g {
        color: green;
    }

</style>

<div class="main-panel">
    <div class="index-format">
        <h2>MVP Items Left</h2>
        <ul>
            <li>Grapher Page - Cytoscape.js implemented for graph</li>
            <li>Permutations Page</li>
            <li>AppSettings page that will hold preferred Recipes to use in Grapher</li>
        </ul>

        <h2>Current Tasks</h2>
        <ul>
            <li>Minor Issues and things</li>
            <li>
                <ul>
                    <li>Large processing is slow and various touch ups</li>
                    <li>
                        <ul>
                            <li>Generate Filtersets per item in jsconverter project and aggregate once filter set is open</li>
                            <li>Add options in modal to pre-exclude recipes for items selected</li>
                            <li>Add options in modal to import items, add second list under first list</li>
                            <li>Jump onto settings Page for exclusions</li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li class="c">Permutation Refactor</li>
            <li>
                <ul>
                    <li>Rework logic to just stub in item and recipe</li>
                    <li>Change Node to hold objects vs strings for memory opt</li>
                    <li>Add PermStatus Enum to handle state - initialized, hydrated, Graphed</li>
                    <li>Pulling perms for current page will check status and hydrate if needed</li>
                    <li>hydrate will rerun second perm logic to add values</li>
                    <li>--------------</li>
                    <li>Add static tree for pausing</li>
                    <li>Aggregate top down</li>
                    <li>SpawnDev.BlazorJS</li>
                </ul>
            </li>

            <li class="c"> Permutator Page</li>
            <li>
                <ul>
                    <li>General</li>
                    <li>
                        <ul>
                            <li>Add Byproduct Parameter on node for overflow items</li>
                            <li>Add Overflow logic into permutations</li>
                            <li>Add Options for miner level, node purity, and water/oil extraction type</li>
                        </ul>
                    </li>
                    <li>Filters</li>
                    <li>
                        <ul>
                            <li>Make expandable - default to small</li>
                            <li>List items with their recipes</li>
                            <li>Option to import certain item from storage</li>
                            <li>Building filter</li>
                            <li>reset option</li>
                            <li>raw resource filter</li>
                        </ul>
                    </li>
                    <li class="c">Perm List</li>
                    <li>
                        <ul>
                            
                            <li>Option to set all recipes in a permutation as defaults</li>
                            <li>Option to send to grapher</li>
                            <li>Option to remove row</li>
                            <li>
                                <ul>
                                    <li>Option section - Details, Graph, Remove</li>
                                </ul>
                            </li>
                        </ul>
                    </li>
                </ul>
            </li>
        </ul>

        <h2>Backlog</h2>
        <ul>
            <li>General</li>
            <li>
                <ul>
                    <li>Import font - Tomorrow - directly instead of fetching it from Google on load</li>
                    <li>Preferred recipe json</li>
                    <li>scroll to top between nav category selections</li>
                </ul>
            </li>

            <li>Settings Page</li>
            <li>
                <ul>
                    <li>Rebuild recycled plastic/rubber input setting (30-9999)</li>
                    <li>Updated settings state container to bounds check input setting</li>
                    <li>Add secondary plastic/rubber recipe choices for when recycled recipe falls under minimum</li>
                    <li>Design layout for default recipes</li>
                    <li>Option to turn off xmas items</li>
                    <li>
                        <ul>
                            <li>Categorize same way codex is with general settings as first category(recycled, etc.)</li>
                            <li>Each item will have all its recipes listed next to it with defaulted highlighted (basics, alts, ?byproducts?)</li>
                            <li>Clicking a button or entering in value where appropriate will update settings state immediately, no need for a save button</li>
                            <li>Add reset to defaults button which will set min recycle to 30 and set all recipes back to basic</li>
                        </ul>
                    </li>
                </ul>
            </li>

            <li>Grapher Page</li>
            <li>
                <ul>
                    <li>Grapher Library</li>
                    <li>Grapher state container</li>
                    <li>Implement Cytoscape.js for graphing</li>
                    <li>qnav area will hold meta data on what is getting graphed</li>
                    <li>
                        <ul>
                            <li>Total power</li>
                            <li>Total infra cost</li>
                            <li>Total materials needed/inputs from storage</li>
                        </ul>
                    </li>
                </ul>
            </li>

            <li>Home Page</li>
            <li>
                <ul>
                    <li>Overview</li>
                    <li>documentation</li>
                    <li>contact info for bugs/feature requests</li>
                </ul>
            </li>
        </ul>

        <h2>Stretch Goals</h2>
        <ul>
            <li>Codex</li>
            <li>
                <ul>
                    <li>nuclear - by products</li>
                    <li>Add Tier # to Items</li>
                    <li>Add Handcraftable info for items/equipment with which workbench to use</li>
                    <li>Add found tapes to boombox</li>
                </ul>
            </li>
            <li>Permutator</li>
            <li>
                <ul>
                    <li>Option to freeze row for comparison</li>
                    <li></li>
                </ul>
            </li>
            <li>Cookies to store preferred Recipes</li>
            <li>option to save/export production lines</li>
            <li>Predefined production lines if saving production lines gets implemented</li>
            <li>
                <ul>
                    <li>Starter factory setups (will be small versions to give someone new an idea of how to lay productions lines out)</li>
                    <li>Starter base that lays out lines for things needed for all lower tiers</li>
                    <li>Oil setup </li>
                    <li>Aluminum setup</li>
                    <li>Nuclear</li>
                    <li>Other types of setups that can be generated and updated to the default setups in page easily</li>
                    <li>All predefined will not be able to be overwritten but user can save an altered production line if a template gets tweaked to meet needs</li>
                </ul>
            </li>
            <li>Save scroll position between page navigations</li>
        </ul>
    </div>
</div>

@code
{
    protected override async Task OnInitializedAsync()
    {
        CodexState.OnStateChange += StateHasChanged;
        MenuState.OnStateChange += StateHasChanged;

        if (CodexState.Codex == null)
        {
            await CodexState.InitializeCodexAsync();
        }
    }

    public void Dispose()
    {
        CodexState.OnStateChange -= StateHasChanged;
        MenuState.OnStateChange -= StateHasChanged;
    }
}

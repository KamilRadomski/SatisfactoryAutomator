@page "/codex"

@using SatisfactoryProductionator.Components.Codex
@using SatisfactoryProductionator.Components.Menu
@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels;
@using SatisfactoryProductionator.Services;
@using SatisfactoryProductionator.Components;
@using SatisfactoryProductionator.Components.CodexModal;

@inject CodexState CodexState
@inject MenuState MenuState
@inject AppModalState AppModalState

@implements IDisposable

<div data-augmented-ui-reset></div>
@{
    MenuState.SetPage(Page.Codex);
    AppModalState.SetModal(ModalType.Codex);
}

<div class="pos-abs main-panel">
    @if (CodexState.Codex == null)
    {
        <div>Loading.....</div>
    }
    else
    {
        <table>
            @if (MenuState.SelectedCategory is CodexCategory.Infrastructure)
            {
                @foreach (var group in GetInfrastructureCategorySubItems())
                {
                    <CodexGroup subItemGroup="group"
                                category=CodexCategory.Infrastructure />
                }
            }
            else if (MenuState.SelectedCategory is CodexCategory.Unlock)
            {
                @foreach (var group in GetUnlockCategorySubItems())
                {
                    <CodexGroup subItemGroup="group"
                                category=CodexCategory.Unlock />
                }
            }
            else
            {
                @foreach (var group in GetCategoryItems())
                {
                    <CodexGroup itemGroup="group"
                                category=CodexCategory.Default />
                }
            }
        </table>
    }
</div>

@code {

    private static AppSettings _settings = new AppSettings();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        CodexState.OnStateChange += StateHasChanged;
        MenuState.OnStateChange += StateHasChanged;
        AppModalState.OnStateChange += StateHasChanged;

        if (CodexState.Codex == null)
        {
            await CodexState.InitializeCodexAsync();
        }
    }

    public void Dispose()
    {
        CodexState.OnStateChange -= StateHasChanged;
        MenuState.OnStateChange -= StateHasChanged;
        AppModalState.OnStateChange -= StateHasChanged;
    }

    private List<IGrouping<CodexItemType, CodexEntry>> GetCategoryItems()
    {
        var category = MenuState.SelectedCategory;

        var items = CodexState.Codex.CodexItems.Where(x => x.CodexCategory == category).OrderBy(x => x.CodexItemType).GroupBy(x => x.CodexItemType).ToList();

        return items;
    }

    private List<IGrouping<CodexSubItemType, CodexEntry>> GetInfrastructureCategorySubItems()
    {
        var infraCategory = MenuState.SelectedInfrastructure;
        var subCategoryList = GetInfrastructureSubCategories(infraCategory);

        var items = CodexState.Codex.CodexItems.Where(x => x.CodexCategory is CodexCategory.Infrastructure &&
                                                           subCategoryList.Contains(x.CodexItemType))
                                               .OrderBy(x => x.CodexSubItemType).GroupBy(x => x.CodexSubItemType).ToList();

        return items;
    }

    private List<CodexItemType> GetInfrastructureSubCategories(InfrastructureSubCategory infraCategory)
    {
        return infraCategory switch
        {
            InfrastructureSubCategory.Foundations => new List<CodexItemType> { CodexItemType.Foundation },
            InfrastructureSubCategory.WallsRoofs => new List<CodexItemType> { CodexItemType.Wall, CodexItemType.Roof },
            InfrastructureSubCategory.General => new List<CodexItemType> {CodexItemType.Train,
                                                                          CodexItemType.Conveyor,
                                                                          CodexItemType.Sorting,
                                                                          CodexItemType.PowerPole,
                                                                          CodexItemType.Pipeline,
                                                                          CodexItemType.HyperTube,
                                                                          CodexItemType.Beam,
                                                                          CodexItemType.Pillar,
                                                                          CodexItemType.Towers,
                                                                          CodexItemType.Pad,
                                                                          CodexItemType.Walkway,
                                                                          CodexItemType.Sorters,
                                                                          CodexItemType.Sign,
                                                                          CodexItemType.Lights,
                                                                          CodexItemType.Stairs,
                                                                          CodexItemType.Xmas,
                                                                          CodexItemType.Frame}
        };
    }

    private List<IGrouping<CodexSubItemType, CodexEntry>> GetUnlockCategorySubItems()
    {
        var unlockCategory = MenuState.SelectedUnlock;
        var subCategoryList = GetUnlockSubCategories(unlockCategory);

        var items = CodexState.Codex.CodexItems.Where(x => x.CodexCategory is CodexCategory.Unlock &&
                                                           subCategoryList.Contains(x.CodexItemType))
                                               .OrderBy(x => x.CodexSubItemType).GroupBy(x => x.CodexSubItemType).ToList();

        return items;
    }

    private List<CodexItemType> GetUnlockSubCategories(UnlockSubCategory unlockCategory)
    {
        return unlockCategory switch
        {
            UnlockSubCategory.Milestone => new List<CodexItemType> { CodexItemType.Milestones },
            UnlockSubCategory.Mam => new List<CodexItemType> { CodexItemType.Mam },
            UnlockSubCategory.Shop => new List<CodexItemType> { CodexItemType.AwesomeShop }
        };
    }
}
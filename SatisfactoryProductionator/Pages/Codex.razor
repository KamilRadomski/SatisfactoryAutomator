@* @page "/codex"
@using SatisfactoryProductionator.DataModels.Models.CodexPages;
@using SatisfactoryProductionator.DataModels;
@using SatisfactoryProductionator.DataModels.Models
@using SatisfactoryProductionator.DataModels.Enums
@using System.Globalization
@using SatisfactoryProductionator.Services;

@inject SettingsState SettingsState

@implements IDisposable

@inject HttpClient Http

{
            {

                <div data-augmented-ui-reset></div>
                <div data-augmented-ui="tl-clip tr-clip br-clip bl-2-clip-x r-clip-y border" class="info-panel-recipe">
                    @if (_currentRecipePage == null)
                    {
                        <p class="info-panel-no-recipe-message">No Recipes </p>
                    }
                    else
                    {
                        <table class="info-panel-recipe-table">
                            @{
                                _currentRecipeType = null;
                            }
                            @foreach (var recipe in _currentRecipePage.Recipes!)
                            {
                                if (_currentRecipeType == null || (_currentRecipePage.PageType == PageType.Main && _currentRecipeType == RecipeType.Basic && recipe.RecipeType == RecipeType.Alternate))
                                {
                                    _currentRecipeType = recipe.RecipeType;
                                    <tr>
                                        <td colspan="4" class="info-panel-recipe-header">@FormatCategoryName(GetRecipePageHeader(_currentRecipePage.PageType, recipe.RecipeType))</td>
                                    </tr>
                                }
                                <tr>
                                    <td>
                                        @if (recipe.RecipeType is RecipeType.Basic)
                                        {
                                             <div class=@CssIsDefault(recipe)>
                                                <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="info-panel-recipe-name-basic">
                                                    <button type="button" class="info-panel-recipe-name-button" @onclick="@(() => SetRecipeDetails(recipe.DisplayName))">
                                                        @FormatDisplayName(recipe.DisplayName!)
                                                    </button>
                                                </div>
                                            </div> 
                                        }
                                        else
                                        {
                                            <div class=@CssIsDefault(recipe)>
                                                <div data-augmented-ui="tl-2-clip-x tr-2-clip-x br-2-clip-x b-clip-x bl-2-clip-x border" class="info-panel-recipe-name-alternate">
                                                    <button type="button" class="info-panel-recipe-name-button" @onclick="@(() => SetRecipeDetails(recipe.DisplayName))">
                                                        @FormatDisplayName(recipe.DisplayName!)
                                                    </button>
                                                </div>
                                            </div> 
                                        }

                                    </td>
                                    <td>
                                        <table>
                                            <tr>
                                                @foreach (var item in recipe.Inputs!)
                                                {
                                                    <td>
                                                        <button class="main-panel-category-button info-panel-recipe-button" type="button" @onclick="@(() => AddItemRecipe(item.Key!))">
                                                            <img class="info-panel-recipe-image" src=@GetIconLocation(item.Key) alt=@item.Key />
                                                            <div class="info-panel-recipe-quantity">@Math.Round(item.Value[1], 2)/min</div>
                                                        </button>
                                                    </td>
                                                }
                                            </tr>
                                        </table>
                                    </td>
                                    <td> >>> </td>
                                    <td>
                                        <table>
                                            <tr>
                                                @foreach (var item in recipe.Outputs!)
                                                {
                                                    <td>
                                                        <button class="main-panel-category-button info-panel-recipe-button" type="button" @onclick="@(() => AddItemRecipe(@item.Key!))">
                                                            <img class="info-panel-recipe-image" src=@GetIconLocation(item.Key) alt=@item.Key />
                                                            <div class="info-panel-recipe-quantity">@Math.Round(item.Value[1], 2)/min</div>
                                                        </button>
                                                    </td>
                                                }
                                            </tr>
                                        </table>
                                    </td>
                                </tr>
                            }
                        </table>
                        @if (GetPageCount() > 1)
                        {
                            <div data-augmented-ui-reset class="info-panel-recipe-paging">
                                <div class="info-panel-recipe-paging-pages">
                                    @for (var i = 0; i < GetPageCount(); i++)
                                    {
                                        <div class=@ParseCssPageLight(i)></div>
                                    }
                                </div>
                                <div class="info-panel-recipe-paging-nav">
                                    <button type="button" class="info-panel-recipe-paging-nav-button" @onclick=@InfoPageLeft>
                                        <span class="info-panel-paging-nav-icon oi-caret-left" aria-hidden="true"></span>
                                    </button>
                                    <button type="button" class="info-panel-recipe-paging-nav-button" @onclick=@InfoPageRight>
                                        <span class="info-panel-paging-nav-icon oi-caret-right" aria-hidden="true"></span>
                                    </button>
                                </div>
                            </div>
                        }
                    }
                </div>

                <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="info-panel-details">
                    @if (_recipeDetails == null)
                    {
                        <div class="info-panel-details-title">No Recipe Selected</div>
                    }
                    else
                    {
                        <div class="info-panel-details-left">
                            <div class="info-panel-details-title">@FormatDisplayName(_recipeDetails!.DisplayName!)</div>
                            <table class="info-panel-details-table">
                                <tr>
                                    <td class="info-panel-details-row-category">Inputs</td>
                                </tr>
                                <tr>
                                    @foreach (var item in _recipeDetails.Inputs!)
                                    {
                                        <td>
                                            <button class="main-panel-category-button info-panel-recipe-button" type="button" @onclick="@(() => AddItemRecipe(item.Key))">
                                                <img class="info-panel-recipe-image" src=@GetIconLocation(item.Key) alt=@item.Key />
                                                <div class="info-panel-recipe-quantity">X @item.Value[0]</div>
                                            </button>
                                        </td>
                                    }
                                </tr>
                                <tr>
                                    <td class="info-panel-details-row-category">Outputs</td>
                                </tr>
                                <tr>
                                    @foreach (var item in _recipeDetails.Outputs!)
                                    {
                                        <td>
                                            <button class="main-panel-category-button info-panel-recipe-button" type="button" @onclick="@(() => AddItemRecipe(item.Key))">
                                                <img class="info-panel-recipe-image" src=@GetIconLocation(item.Key) alt=@item.Key />
                                                <div class="info-panel-recipe-quantity">X @item.Value[0]</div>
                                            </button>
                                        </td>
                                    }
                                </tr>
                            </table>
                        </div>
                        <div class="info-panel-details-right">
                            <img class="info-panel-details-building" src=@GetIconLocation(_recipeDetails!.Building!) alt=@_recipeDetails.Building />
                            <div class="info-panel-details-building-name">@_recipeDetails.Building</div>
                             <div class="info-panel-details-building-mw">@GetPower(_recipeDetails.Building)MW</div> 
                            <div class="info-panel-details-building-mw">@_recipeDetails.BuildTime Seconds</div>
                            <div data-augmented-ui="tl-clip-x tr-clip-y br-clip-x bl-clip-y border" class="info-panel-details-default-aug">
                                <button type="button" @onclick="@(() => SetDefaultRecipe(_recipeDetails))" class="info-panel-details-default">Set As Default</button>
                            </div>
                        </div>
                    }
                </div>

                <div data-augmented-ui="tl-clip tr-clip br-2-clip-y bl-clip border" class="info-panel-options">
                    <div style="padding:20px; margin:10px;font-size:1.2rem;color: red;">
                        <p> UNDER CONSTRUCTION</p>
                        <p>Grapher and Permutator Options</p>
                    </div>
                </div>
            }
}

@code {
    private static AppSettings _settings = new AppSettings();

    private static ItemRecipes? _currentItemRecipes;
    private static RecipePage? _currentRecipePage;
    private static Recipe? _recipeDetails;
    private static Dictionary<string, ItemRecipes>? _itemRecipeCache;
    private static RecipeType? _currentRecipeType;

    private static void SetRecipePage(int index)
    {
        // _currentRecipePage = _currentItemRecipes!.Pages![index];

        // _currentItemRecipes!.PageIndex = index;
    }

    private static int GetPageCount()
    {
        var count = _currentItemRecipes!.Pages!.Count;

        return _currentItemRecipes.HasDoubleMainPage ? --count : count;
    }


    /*Recipe Page Nav Buttons*/
    #region

    private static void InfoPageLeft()
    {
        var pageCount = GetPageCount();
        var index = _currentItemRecipes!.PageIndex;
        index--;

        if (index < 0)
            index = pageCount - 1;

        SetRecipePage(index);
    }

    private static void InfoPageRight()
    {
        var pageCount = GetPageCount();
        var index = _currentItemRecipes!.PageIndex;
        index++;

        if (index > pageCount - 1)
            index = 0;

        SetRecipePage(index);
    }

    #endregion

    /*CSS Methods*/
    #region

    private static string ParseCssPageLight(int i) => _currentItemRecipes!.PageIndex == i ? "info-panel-recipe-paging-pages-light info-panel-recipe-paging-pages-light-on" : "info-panel-recipe-paging-pages-light info-panel-recipe-paging-pages-light-off";


    private static string CssIsDefault(Recipe recipe)
    {
        if (_settings.PreferredRecipe.ContainsValue(recipe.DisplayName))
        {
            return "shadow-on";
        }

        var item = recipe.Outputs!.Keys.First();

        if (recipe.RecipeType is RecipeType.Basic && !_settings.PreferredRecipe.ContainsKey(item))
        {
            return "shadow-on";
        }

        return string.Empty;
    }

    #endregion

    // private static void SetRecipeDetails(string? name) => _recipeDetails = _currentItemRecipes!.Pages!.SelectMany(x => x.Recipes!).First(x => x.DisplayName == name);


    private static string GetRecipePageHeader(PageType pageType, RecipeType recipeType) => pageType != PageType.Main ? pageType.ToString() : recipeType.ToString();

   

    private void SetDefaultRecipe(Recipe recipe)
    {
        var item = recipe.Outputs!.Keys.First();

        if (!_settings.PreferredRecipe!.ContainsKey(item) && recipe.RecipeType is RecipeType.Basic) return;

        if(_settings.PreferredRecipe!.ContainsKey(item) && recipe.RecipeType is RecipeType.Alternate)
        {
            _settings.PreferredRecipe[item] = recipe.DisplayName!;
        }
        else if (_settings.PreferredRecipe!.ContainsKey(item) && recipe.RecipeType is RecipeType.Basic)
        {
            _settings.PreferredRecipe.Remove(item);
        }
        else
        {
            _settings.PreferredRecipe.Add(item, recipe.DisplayName!);
        }

        SettingsState.SetValue(_settings);
    }

}
 *@
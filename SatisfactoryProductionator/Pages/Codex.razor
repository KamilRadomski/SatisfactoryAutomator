@page "/codex"

@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels;
@using SatisfactoryProductionator.Services;
@using SatisfactoryProductionator.Shared;
@using SatisfactoryProductionator.Shared.CodexModal;

@inject CodexState CodexState
@inject CodexMenuState CodexMenuState

@implements IDisposable

<div data-augmented-ui-reset></div>
<CodexMenu />

<div data-augmented-ui="tl-2-clip-x tr-clip br-clip bl-2-clip-y border" class="pos-abs panel-wrapper">

    <div class="pos-abs main-panel">
        @if (CodexState.Codex == null)
        {
            <div>Loading.....</div>
        }
        else
        {
            <table>
                @if (CodexMenuState.SelectedCategory is not CodexCategory.Infrastructure)
                {
                    @foreach (var group in GetCategoryItems())
                    {
                        <CodexGroup itemGroup="group"
                                    category=CodexCategory.Default />
                    }
                }
                else
                {
                    @foreach (var group in GetCategorySubItems())
                    {
                        <CodexGroup subItemGroup="group"
                                    category=CodexCategory.Infrastructure />
                    }
                }
            </table>
        }
    </div>
</div>

<CodexModal />

@code {

    private static AppSettings _settings = new AppSettings();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        CodexState.OnStateChange += StateHasChanged;
        CodexMenuState.OnStateChange += StateHasChanged;

        if (CodexState.Codex == null)
        {
            await CodexState.InitializeCodexAsync();
        }
    }

    public void Dispose()
    {
        CodexState.OnStateChange -= StateHasChanged;
        CodexMenuState.OnStateChange -= StateHasChanged;
    }

    private List<IGrouping<CodexItemType, CodexEntry>> GetCategoryItems()
    {
        var category = CodexMenuState.SelectedCategory;

        var items = CodexState.Codex.CodexItems.Where(x => x.CodexCategory == category).OrderBy(x => x.CodexItemType).GroupBy(x => x.CodexItemType).ToList();

        return items;
    }

    private List<IGrouping<CodexSubItemType, CodexEntry>> GetCategorySubItems()
    {
        var infraCategory = CodexMenuState.SelectedInfrastructure;
        var subCategoryList = GetSubCategories(infraCategory);

        var items = CodexState.Codex.CodexItems.Where(x => x.CodexCategory is CodexCategory.Infrastructure &&
                                                           subCategoryList.Contains(x.CodexItemType))
                                               .OrderBy(x => x.CodexSubItemType).GroupBy(x => x.CodexSubItemType).ToList();

        return items;
    }

    private List<CodexItemType> GetSubCategories(InfrastructureSubCategory infraCategory)
    {
        return infraCategory switch
        {
            InfrastructureSubCategory.Foundations => new List<CodexItemType> { CodexItemType.Foundation },
            InfrastructureSubCategory.WallsRoofs => new List<CodexItemType> { CodexItemType.Wall, CodexItemType.Roof },
            InfrastructureSubCategory.General => new List<CodexItemType> {CodexItemType.Train,
                                                                          CodexItemType.Conveyor,
                                                                          CodexItemType.Sorting,
                                                                          CodexItemType.PowerPole,
                                                                          CodexItemType.Pipeline,
                                                                          CodexItemType.HyperTube,
                                                                          CodexItemType.Beam,
                                                                          CodexItemType.Pillar,
                                                                          CodexItemType.Towers,
                                                                          CodexItemType.Pad,
                                                                          CodexItemType.Walkway,
                                                                          CodexItemType.Sorters,
                                                                          CodexItemType.Sign,
                                                                          CodexItemType.Lights,
                                                                          CodexItemType.Stairs,
                                                                          CodexItemType.Xmas,
                                                                          CodexItemType.Frame}
        };
    }
}
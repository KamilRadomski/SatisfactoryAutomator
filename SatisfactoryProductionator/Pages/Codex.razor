@page "/codex"
@using SatisfactoryProductionator.DataParser
@using SatisfactoryProductionator.DataModels.Models
@using SatisfactoryProductionator.DataModels.Enums
@using SatisfactoryProductionator.DataManager
@using System.Globalization
@using SatisfactoryProductionator.Shared.States;
@using SatisfactoryProductionator.Shared.States.Models;
@inject SettingsState SettingsState
@implements IDisposable

@inject HttpClient Http

@*<link rel="stylesheet" type="text/css" href="css/augmented-ui/augmented-ui.min.css" />*@

<PageTitle>Items</PageTitle>

<style type="text/css">
    .shadow-on {
        filter: drop-shadow(3px 0px 1px blue)drop-shadow(-3px 0px 1px blue)drop-shadow(0px 3px 1px blue)drop-shadow(0px -3px 1px blue);
    }
</style>

@if (DataAggregator.Items.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <div data-augmented-ui-reset></div>

    /*Quick Nav*/
    <div data-augmented-ui="tl-clip br-clip bl-clip border" class="quick-nav">
        <div data-augmented-ui-reset>
            <div data-augmented-ui="tl-clip br-clip border" class="quick-nav-title">
                <div class="quick-nav-title-q">Q</div>
                <div class="quick-nav-title-nav">Nav</div>
            </div>
            <ul class="quick-nav-list">
                @foreach (var group in GroupItems())
                {
                    <li class="quick-nav-list-item">
                        <button type="button" class="quick-nav-list-item-button" onclick="document.getElementById('@group.Key').scrollIntoView({behavior:'smooth'})">
                            <div class="quick-nav-list-item-button-text">@FormatCategoryName(group.Key.ToString()!)</div>
                        </button>
                    </li>
                }
            </ul>
        </div>
    </div>

    /*Main Panel*/
    <div data-augmented-ui-reset class="main-panel">
        @foreach (var group in GroupItems())
        {
            <div data-augmented-ui="tl-clip tr-2-clip-x br-clip bl-clip border" class="main-panel-category">
                <div id=@group.Key class="main-panel-category-header">
                    @FormatCategoryName(group.Key.ToString()!)
                </div>
                @foreach (var item in @group)
                {
                    <button class="main-panel-category-button" type="button" @onclick="@(() => AddItemRecipe(@item.DisplayName!))">
                        <div data-augmented-ui="tl-clip tr-2-clip-y br-clip bl-2-clip-x border" class="main-panel-category-button-item">
                            <img src=@GetIconLocation(item.DisplayName!) alt=@item.DisplayName />
                            <div class="main-panel-category-button-item-name">
                                @FormatDisplayName(item.DisplayName!)
                            </div>
                        </div>
                    </button>
                }
            </div>
        }
    </div>

    /*Info Panel Toggle*/
    <button type="button" class="info-toggle-button" @onclick=TogglePanel>
        <div data-augmented-ui="bl-clip border" class="info-toggle">
            <span class="info-toggle-icon oi-eye"></span>
        </div>
    </button>

    /*Info Panel*/
    <div data-augmented-ui-reset class=@CssIsInfoPanelActive()>
        <div data-augmented-ui="tl-2-clip-y tr-2-clip-x br-2-clip-y bl-2-clip-x border" class="info-panel">
            <div data-augmented-ui-reset></div>
            @if (_currentItem == null)
            {
                <p class="info-panel-no-item"> No Items Selected</p>
            }
            else
            {
                <div data-augmented-ui="tl-2-clip-y tr-2-clip-x br-clip b-clip-x bl-clip border" class="info-panel-top">

                    <div data-augmented-ui-reset class="info-panel-top-header">
                        <div class="info-panel-top-header-name">@FormatDisplayName(_currentItem.DisplayName!)</div>
                        <div class="info-panel-top-header-buttons">

                            <div data-augmented-ui="all-hex border" class="info-panel-top-header-buttons-button">
                                <button type="button" class="info-panel-top-header-buttons-clear" @onclick=@ClearInfoPanel>
                                    <span class="info-panel-top-header-buttons-icon oi-trash" aria-hidden="true"></span>
                                </button>
                            </div>

                            <div data-augmented-ui="all-hexangle-left border" class=@CssIsPreviousActive()>
                                <button type="button" disabled=@IsDisplayPreviousInactive class="info-panel-top-header-buttons-nav" @onclick=@DisplayPrevious></button>
                            </div>

                            <div data-augmented-ui="all-hexangle-right border" class=@CssIsNextActive()>
                                <button type="button" disabled=@IsDisplayNextInactive class="info-panel-top-header-buttons-nav" @onclick=@DisplayNext></button>
                            </div>

                            <div data-augmented-ui="all-hex border" class="info-panel-top-header-buttons-button">
                                <button type="button" class="info-panel-top-header-buttons-close" @onclick=@CloseInfoPanel>
                                    <span class="info-panel-top-header-buttons-icon oi-x" aria-hidden="true"></span>
                                </button>
                            </div>

                        </div>
                    </div>

                    <div class="info-panel-top-data">
                        <img class="info-panel-top-data-image" src=@GetIconLocation(_currentItem.DisplayName!) alt=@_currentItem.DisplayName />
                        <div class="info-panel-top-data-description">
                            <p>@_currentItem.Description</p>
                            @if (_currentItem.FormType == FormType.Solid)
                            {
                                <p>Stack.Size :: @_currentItem.StackSize</p>
                            }
                            @if (@_currentItem.EnergyValue > 0)
                            {
                                <p>MJ.Rating :: @_currentItem.EnergyValue</p>
                            }
                            @if (@_currentItem.ResourceSinkPoints > 0)
                            {
                                <p>Resource.Sink.Points :: @_currentItem.ResourceSinkPoints</p>
                            }
                            else
                            {
                                <p>Caution :: Cannot Sink!</p>
                            }
                        </div>
                    </div>
                </div>

                <div data-augmented-ui-reset></div>
                <div data-augmented-ui="tl-clip tr-clip br-clip bl-2-clip-x r-clip-y border" class="info-panel-recipe">
                    @if (_currentRecipePage == null)
                    {
                        <p class="info-panel-no-recipe-message">No Recipes </p>
                    }
                    else
                    {
                        <table class="info-panel-recipe-table">
                            @{
                                _currentRecipeType = null;
                            }
                            @foreach (var recipe in _currentRecipePage.Recipes!)
                            {
                                if (_currentRecipeType == null || (_currentRecipePage.PageType == PageType.Main && _currentRecipeType == RecipeType.Basic && recipe.RecipeType == RecipeType.Alternate))
                                {
                                    _currentRecipeType = recipe.RecipeType;
                                    <tr>
                                        <td colspan="4" class="info-panel-recipe-header">@FormatCategoryName(GetRecipePageHeader(_currentRecipePage.PageType, recipe.RecipeType))</td>
                                    </tr>
                                }
                                <tr>
                                    <td>
                                        @if (recipe.RecipeType is RecipeType.Basic)
                                        {
                                            <div class=@CssIsDefault(recipe)>
                                                <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="info-panel-recipe-name-basic">
                                                    <button type="button" class="info-panel-recipe-name-button" @onclick="@(() => SetRecipeDetails(recipe.DisplayName))">
                                                        @FormatDisplayName(recipe.DisplayName!)
                                                    </button>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class=@CssIsDefault(recipe)>
                                                <div data-augmented-ui="tl-2-clip-x tr-2-clip-x br-2-clip-x b-clip-x bl-2-clip-x border" class="info-panel-recipe-name-alternate">
                                                    <button type="button" class="info-panel-recipe-name-button" @onclick="@(() => SetRecipeDetails(recipe.DisplayName))">
                                                        @FormatDisplayName(recipe.DisplayName!)
                                                    </button>
                                                </div>
                                            </div>
                                        }

                                    </td>
                                    <td>
                                        <table>
                                            <tr>
                                                @foreach (var item in recipe.Inputs!)
                                                {
                                                    <td>
                                                        <button class="main-panel-category-button info-panel-recipe-button" type="button" @onclick="@(() => AddItemRecipe(item.Key!))">
                                                            <img class="info-panel-recipe-image" src=@GetIconLocation(item.Key) alt=@item.Key />
                                                            <div class="info-panel-recipe-quantity">@Math.Round(item.Value[1], 2)/min</div>
                                                        </button>
                                                    </td>
                                                }
                                            </tr>
                                        </table>
                                    </td>
                                    <td> >>> </td>
                                    <td>
                                        <table>
                                            <tr>
                                                @foreach (var item in recipe.Outputs!)
                                                {
                                                    <td>
                                                        <button class="main-panel-category-button info-panel-recipe-button" type="button" @onclick="@(() => AddItemRecipe(@item.Key!))">
                                                            <img class="info-panel-recipe-image" src=@GetIconLocation(item.Key) alt=@item.Key />
                                                            <div class="info-panel-recipe-quantity">@Math.Round(item.Value[1], 2)/min</div>
                                                        </button>
                                                    </td>
                                                }
                                            </tr>
                                        </table>
                                    </td>
                                </tr>
                            }
                        </table>
                        @if (GetPageCount() > 1)
                        {
                            <div data-augmented-ui-reset class="info-panel-recipe-paging">
                                <div class="info-panel-recipe-paging-pages">
                                    @for (var i = 0; i < GetPageCount(); i++)
                                    {
                                        <div class=@ParseCssPageLight(i)></div>
                                    }
                                </div>
                                <div class="info-panel-recipe-paging-nav">
                                    <button type="button" class="info-panel-recipe-paging-nav-button" @onclick=@InfoPageLeft>
                                        <span class="info-panel-paging-nav-icon oi-caret-left" aria-hidden="true"></span>
                                    </button>
                                    <button type="button" class="info-panel-recipe-paging-nav-button" @onclick=@InfoPageRight>
                                        <span class="info-panel-paging-nav-icon oi-caret-right" aria-hidden="true"></span>
                                    </button>
                                </div>
                            </div>
                        }
                    }
                </div>

                <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="info-panel-details">
                    @if (_recipeDetails == null)
                    {
                        <div class="info-panel-details-title">No Recipe Selected</div>
                    }
                    else
                    {
                        <div class="info-panel-details-left">
                            <div class="info-panel-details-title">@FormatDisplayName(_recipeDetails!.DisplayName!)</div>
                            <table class="info-panel-details-table">
                                <tr>
                                    <td class="info-panel-details-row-category">Inputs</td>
                                </tr>
                                <tr>
                                    @foreach (var item in _recipeDetails.Inputs!)
                                    {
                                        <td>
                                            <button class="main-panel-category-button info-panel-recipe-button" type="button" @onclick="@(() => AddItemRecipe(item.Key))">
                                                <img class="info-panel-recipe-image" src=@GetIconLocation(item.Key) alt=@item.Key />
                                                <div class="info-panel-recipe-quantity">X @item.Value[0]</div>
                                            </button>
                                        </td>
                                    }
                                </tr>
                                <tr>
                                    <td class="info-panel-details-row-category">Outputs</td>
                                </tr>
                                <tr>
                                    @foreach (var item in _recipeDetails.Outputs!)
                                    {
                                        <td>
                                            <button class="main-panel-category-button info-panel-recipe-button" type="button" @onclick="@(() => AddItemRecipe(item.Key))">
                                                <img class="info-panel-recipe-image" src=@GetIconLocation(item.Key) alt=@item.Key />
                                                <div class="info-panel-recipe-quantity">X @item.Value[0]</div>
                                            </button>
                                        </td>
                                    }
                                </tr>
                            </table>
                        </div>
                        <div class="info-panel-details-right">
                            <img class="info-panel-details-building" src=@GetIconLocation(_recipeDetails!.Building!) alt=@_recipeDetails.Building />
                            <div class="info-panel-details-building-name">@_recipeDetails.Building</div>
                            <div class="info-panel-details-building-mw">@GetPower(_recipeDetails.Building)MW</div>
                            <div class="info-panel-details-building-mw">@_recipeDetails.BuildTime Seconds</div>
                            <div data-augmented-ui="tl-clip-x tr-clip-y br-clip-x bl-clip-y border" class="info-panel-details-default-aug">
                                <button type="button" @onclick="@(() => SetDefaultRecipe(_recipeDetails))" class="info-panel-details-default">Set As Default</button>
                            </div>
                        </div>
                    }
                </div>

                <div data-augmented-ui="tl-clip tr-clip br-2-clip-y bl-clip border" class="info-panel-options">
                    <div style="padding:20px; margin:10px;font-size:1.2rem;color: red;">
                        <p> UNDER CONSTRUCTION</p>
                        <p>Grapher and Permutator Options</p>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private static AppSettings _settings = new AppSettings();

    private static Item? _currentItem;
    private static ItemRecipes? _currentItemRecipes;
    private static RecipePage? _currentRecipePage;
    private static Recipe? _recipeDetails;
    private static Stack<Item>? _previousStack;
    private static Stack<Item>? _nextStack;
    private static Dictionary<string, ItemRecipes>? _itemRecipeCache;
    private static RecipeType? _currentRecipeType;

    private static bool _isInfoPanelActive;
    private static bool IsDisplayPreviousInactive => _previousStack?.Count == 0;
    private static bool IsDisplayNextInactive => _nextStack?.Count == 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SettingsState.OnStateChange += StateHasChanged;
        _settings = SettingsState.Value ?? new AppSettings(){PreferredRecipe = new Dictionary<string, string>()};

        _previousStack ??= new Stack<Item>();
        _nextStack ??= new Stack<Item>();
        _itemRecipeCache ??= new Dictionary<string, ItemRecipes>();

    }

    public void Dispose()
    {
        SettingsState.OnStateChange -= StateHasChanged;
    }

    private static void AddItemRecipe(string name)
    {
        if (_currentItem != null && _currentItem.DisplayName == name)
        {
            _isInfoPanelActive = true;
            return;
        }

        if (_currentItem != null)
        {
            _previousStack?.Push(_currentItem);
        }

        _nextStack?.Clear();

        if (_itemRecipeCache == null || !_itemRecipeCache!.ContainsKey(name))
            _itemRecipeCache![name] = ItemRecipesGenerator.GetItemRecipes(name)!;

        _currentItemRecipes = _itemRecipeCache[name];
        _currentRecipePage = (_currentItemRecipes.Pages!.Count > 0) ? _currentItemRecipes.Pages?[_currentItemRecipes.PageIndex] : null;

        _currentItem = DataAggregator.Items.Find(x => x.DisplayName == name)!;
        _isInfoPanelActive = true;
    }

    private static IEnumerable<IGrouping<ItemType?, Item>> GroupItems() => DataAggregator.Items.OrderBy(x => x.Category).ThenBy(x => x.DisplayName).GroupBy(x => x.Category);

    private static void SetRecipePage(int index)
    {
        _currentRecipePage = _currentItemRecipes!.Pages![index];

        _currentItemRecipes!.PageIndex = index;
    }

    private static int GetPageCount()
    {
        var count = _currentItemRecipes!.Pages!.Count;

        return _currentItemRecipes.HasDoubleMainPage ? --count : count;
    }

    /*Info Panel Main Buttons*/
    #region

    private static void DisplayPrevious()
    {
        if (IsDisplayPreviousInactive) return;

        _nextStack?.Push(_currentItem!);
        _currentItem = _previousStack?.Pop();
        _currentItemRecipes = _itemRecipeCache?[_currentItem!.DisplayName!];
        SetRecipePage(_currentItemRecipes!.PageIndex);
    }

    private static void DisplayNext()
    {
        if (IsDisplayNextInactive) return;

        _previousStack?.Push(_currentItem!);
        _currentItem = _nextStack?.Pop();
        _currentItemRecipes = _itemRecipeCache?[_currentItem!.DisplayName!];
        SetRecipePage(_currentItemRecipes!.PageIndex);
    }

    private static void CloseInfoPanel()
    {
        _isInfoPanelActive = false;
    }

    private static void ClearInfoPanel()
    {
        _isInfoPanelActive = false;
        _currentItem = null;
        _currentItemRecipes = null;
        _itemRecipeCache?.Clear();
        _previousStack = new Stack<Item>();
        _nextStack = new Stack<Item>();

    }

    #endregion

    /*Recipe Page Nav Buttons*/
    #region

    private static void InfoPageLeft()
    {
        var pageCount = GetPageCount();
        var index = _currentItemRecipes!.PageIndex;
        index--;

        if (index < 0)
            index = pageCount - 1;

        SetRecipePage(index);
    }

    private static void InfoPageRight()
    {
        var pageCount = GetPageCount();
        var index = _currentItemRecipes!.PageIndex;
        index++;

        if (index > pageCount - 1)
            index = 0;

        SetRecipePage(index);
    }

    #endregion

    /*CSS Methods*/
    #region

    private static string ParseCssPageLight(int i) => _currentItemRecipes!.PageIndex == i ? "info-panel-recipe-paging-pages-light info-panel-recipe-paging-pages-light-on" : "info-panel-recipe-paging-pages-light info-panel-recipe-paging-pages-light-off";

    private static string CssIsInfoPanelActive() => _isInfoPanelActive ? "info-panel-on" : "info-panel-off";

    private static string CssIsDefault(Recipe recipe)
    {
        if (_settings.PreferredRecipe.ContainsValue(recipe.DisplayName))
        {
            return "shadow-on";
        }

        var item = recipe.Outputs!.Keys.First();

        if (recipe.RecipeType is RecipeType.Basic && !_settings.PreferredRecipe.ContainsKey(item))
        {
            return "shadow-on";
        }

        return string.Empty;
    }

    #endregion

    /*String Formatters*/
    #region

    private static string GetIconLocation(string name)
    {
      

        return $"../images/icons/{name.Replace(" ", "").Replace("-", "").Replace(".", "")}_256.png";
    }


    private static string FormatCategoryName(string name)
    {
        for (int i = name.Length - 1; i > 0; i--)
        {
            if (char.IsUpper(name[i]))
            {
                name = name.Insert(i, ".");
            }
        }
        return name;
    }

    private static string FormatDisplayName(string name) => name.Replace(" - ", "-").Replace(" ", ".");

    #endregion

    private static void TogglePanel() => _isInfoPanelActive = !_isInfoPanelActive;

    private static void SetRecipeDetails(string? name) => _recipeDetails = _currentItemRecipes!.Pages!.SelectMany(x => x.Recipes!).First(x => x.DisplayName == name);

    private static string GetPower(string? name) => PowerCalculator.GetPower(name);

    private static string GetRecipePageHeader(PageType pageType, RecipeType recipeType) => pageType != PageType.Main ? pageType.ToString() : recipeType.ToString();

    private static string CssIsPreviousActive()
    {
        return IsDisplayPreviousInactive ? "info-panel-top-header-buttons-button-inactive" : "info-panel-top-header-buttons-button";
    }

    private string CssIsNextActive()
    {
        return IsDisplayNextInactive ? "info-panel-top-header-buttons-button-inactive" : "info-panel-top-header-buttons-button";
    }

    private void SetDefaultRecipe(Recipe recipe)
    {
        var item = recipe.Outputs!.Keys.First();

        if (!_settings.PreferredRecipe!.ContainsKey(item) && recipe.RecipeType is RecipeType.Basic) return;

        if(_settings.PreferredRecipe!.ContainsKey(item) && recipe.RecipeType is RecipeType.Alternate)
        {
            _settings.PreferredRecipe[item] = recipe.DisplayName!;
        }
        else if (_settings.PreferredRecipe!.ContainsKey(item) && recipe.RecipeType is RecipeType.Basic)
        {
            _settings.PreferredRecipe.Remove(item);
        }
        else
        {
            _settings.PreferredRecipe.Add(item, recipe.DisplayName!);
        }

        SettingsState.SetValue(_settings);
    }

}

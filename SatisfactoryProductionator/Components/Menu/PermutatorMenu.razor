@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services;

@inject PermModalState PermModalState;
@inject PermState PermState;
@inject CodexState CodexState;

@implements IDisposable;

<div data-augmented-ui-reset></div>

<div data-augmented-ui="tl-clip tr-clip br-2-clip-x bl-2-clip-y border" class="add-btn">
    <button type="button" class="btn-full" @onclick="@(() => PermModalState.ToggleModal())">
        <span class="btn-icon oi-plus" aria-hidden="true"></span>
    </button>
</div>

@if (CodexState.Codex == null)
{
    <div class="pos-rel loading">Loading....</div>
}
else
{
    <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="pos-abs mt-8 item-wrapper">
        <div data-augmented-ui-reset></div>
        <div class="pos-abs flex-col list-wrapper">

            @foreach (var item in PermState.Items)
            {
                <button class="image-button m12" type="button" @onclick="@(() => PermModalState.SetSelectedItem(item.Key, item.Value))">
                    <img class="image-128" src=@CodexState.FetchIconPath(item.Key) alt=@item.Key />
                    <div class="text">@CodexState.FetchDisplayName(item.Key).FormatDisplayName()</div>
                    <div class="amount">@item.Value</div>
                </button>
            }
        </div>
    </div>
}

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();

        PermModalState.OnStateChange += StateHasChanged;
        PermState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        PermModalState.OnStateChange -= StateHasChanged;
        PermState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
    }

}

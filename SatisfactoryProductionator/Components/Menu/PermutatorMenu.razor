@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services.States;

@inject PermModalState PermModalState;
@inject PermState PermState;
@inject CodexState CodexState;

@implements IDisposable;

<div data-augmented-ui-reset></div>

<div data-augmented-ui="tl-clip tr-clip br-2-clip-x bl-2-clip-y border" class="add-btn">
    <button type="button" class="btn-full" @onclick="@(() => PermModalState.ToggleModal())">
        <span class="btn-icon oi-plus" aria-hidden="true"></span>
    </button>
</div>

@if (CodexState.Codex == null)
{
    <div class="pos-rel loading">Loading....</div>
}
else
{
    <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="pos-abs mt-8 item-wrapper">
        <div data-augmented-ui-reset></div>
        <div class="pos-abs flex-col list-wrapper">
            @if (PermState.Items.Any())
            {
                <div class="hor-line">
                    <span>Items</span>
                </div>
                @foreach (var item in PermState.Items)
                {
                    <button class="image-button m12" type="button" @onclick="@(e => OnClickItem(e, item.Key, item.Value))">
                        <img class="image-128" src=@CodexState.FetchIconPath(item.Key) alt=@item.Key />
                        <div class="text">@CodexState.FetchDisplayName(item.Key).FormatDisplayName()</div>
                        <div class="amount">@item.Value</div>
                    </button>
                }
            }
            @if (PermState.Imports.Any())
            {
                <div class="hor-line">
                    <span>Imports</span>
                </div>
                @foreach (var item in PermState.Imports)
                {
                    <button class="image-button m12" type="button" @onclick="@(e => OnClickImport(e, item))">
                        <img class="image-128" src=@CodexState.FetchIconPath(item) alt=@item />
                        <div class="text">@CodexState.FetchDisplayName(item).FormatDisplayName()</div>
                    </button>
                }
            }
        </div>
    </div>
}

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();

        PermModalState.OnStateChange += StateHasChanged;
        PermState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        PermModalState.OnStateChange -= StateHasChanged;
        PermState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
    }

    private void OnClickItem(MouseEventArgs e, string name, double value)
    {
        if(e.ShiftKey)
        {
            PermModalState.MoveItemToImport(name);
        }
        else if(e.CtrlKey)
        {
            PermModalState.RemoveItem(name);
        }
        else
        {
            PermModalState.SetSelectedItem(name, value);
        }
    }

    private void OnClickImport(MouseEventArgs e, string name)
    {
        if (e.ShiftKey)
        {
            PermModalState.MoveImportToItem(name);
        }
        else if (e.CtrlKey)
        {
            PermModalState.RemoveItem(name);
        }
        else
        {
            PermModalState.SetSelectedItem(name);
        }
    }
}

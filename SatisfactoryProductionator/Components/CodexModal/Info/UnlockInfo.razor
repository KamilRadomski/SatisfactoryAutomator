@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services;

@inject CodexModalState CodexModalState;
@inject CodexState CodexState;

@implements IDisposable;

 <div data-augmented-ui="tr-2-clip-y br-2-clip-x l-clip-y border" class="unlock-wrapper">
     <div class="font-20 text">Unlocked By</div>
     <div class="flex button-wrapper">
         @foreach(var unlock in selectedEntry.CodexEntry.UnlockBy)
        {
            <button class="image-button pos-rel btn-offset" type="button" @onclick="@(() => CodexModalState.SetSelectedItem(unlock))">
                <img class="image-96" src=@CodexState.FetchIconPath(unlock) alt=@unlock />
                <div class="font-16">@CodexState.FetchDisplayName(unlock).FormatDisplayName()</div>
            </button>
        }
    </div>
 </div>

@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
    }
}

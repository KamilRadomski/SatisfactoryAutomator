@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services;
@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.Components.CodexModal.Info

@inject CodexModalState CodexModalState;

@implements IDisposable;

<div data-augmented-ui-reset></div>

<div data-augmented-ui="tl-2-clip-y tr-2-clip-x br-clip b-clip-x bl-clip border" class="info-panel">
    <div data-augmented-ui-reset class="info-header">

        @if (selectedEntry == null)
        {
            <div class="header-text">-</div>
        }
        else
        {
            <div class="header-text">@selectedEntry.CodexEntry.DisplayName.FormatDisplayName()</div>
        }

        <EntryNavBar />
    </div>

    @*  <div data-augmented-ui="
    tl-2-clip-x tr-clip br-clip bl-2-clip-y both
    " class="styleme"></div>

    <div data-augmented-ui="
    tr-2-clip-y br-2-clip-x l-clip-y both
    " class="styleme"></div>
    <div class="info-panel-top-data"> *@

    @if (selectedEntry == null)
    {
        <div class="info-panel-top-header-name">No Item Selected</div>
    }
    else
    {


        <img class="info-panel-top-data-image" src=@selectedEntry.CodexEntry.IconPath alt=@selectedEntry.CodexEntry.DisplayName />
        @* Add new class here *@
        <div class="info-panel-top-data-description">
            <p>@selectedEntry.CodexEntry.Description</p>

            @* Call subcomponents here *@
            @if (selectedEntry.CodexEntry.CodexCategory is CodexCategory.Item)
            {
                var item = CastEntry<Item>();

                if (@item.FormType is FormType.Solid)
                {
                    <p>Stack.Size :: @item.StackSize</p>
                }
                if (@item.EnergyValue > 0)
                {
                    <p>MJ.Rating :: @item.EnergyValue</p>
                }
                if (@item.ResourceSinkPoints > 0)
                {
                    <p>Resource.Sink.Points :: @item.ResourceSinkPoints</p>
                }
                else
                {
                    <p>Caution :: Cannot Sink!</p>
                }
            }

            @*  <img class="info-panel-top-data-image2 image-64 test" src=@selectedEntry.CodexEntry.IconPath alt=@selectedEntry.CodexEntry.DisplayName />
        <img class="info-panel-top-data-image2 image-64 test" src=@selectedEntry.CodexEntry.IconPath alt=@selectedEntry.CodexEntry.DisplayName />
        <img class="info-panel-top-data-image2 image-64 test" src=@selectedEntry.CodexEntry.IconPath alt=@selectedEntry.CodexEntry.DisplayName />
        <img class="info-panel-top-data-image2 image-64 test" src=@selectedEntry.CodexEntry.IconPath alt=@selectedEntry.CodexEntry.DisplayName />
        <img class="info-panel-top-data-image2 image-64 test" src=@selectedEntry.CodexEntry.IconPath alt=@selectedEntry.CodexEntry.DisplayName />
        <img class="info-panel-top-data-image2 image-64 test" src=@selectedEntry.CodexEntry.IconPath alt=@selectedEntry.CodexEntry.DisplayName />
        <img class="info-panel-top-data-image2 image-64 test" src=@selectedEntry.CodexEntry.IconPath alt=@selectedEntry.CodexEntry.DisplayName />
        <img class="info-panel-top-data-image2 image-64 test" src=@selectedEntry.CodexEntry.IconPath alt=@selectedEntry.CodexEntry.DisplayName /> *@

        </div>

        @* Add side buttons here 1,2,3,4,5,8 *@
    }
</div>

@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
    }

    private T CastEntry<T>() where T : CodexEntry => selectedEntry.CodexEntry as T;


}

@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services;
@using SatisfactoryProductionator.Utilities;

@inject CodexModalState CodexModalState;
@inject CodexState CodexState;

@implements IDisposable

<table class="page-table w99">
    <tr>
        <td colspan="4" class="page-header">@selectedEntry.GetPageHeader().FormatCategoryName()</td>
    </tr>
    <tr>
        <td>
            @{ var itemBundle = selectedEntry.BundleEntries(GetItems()); }
            <table class="flex-even">
                @foreach(var group in itemBundle)
                {
                    <tr class="flex-even w99">
                        @foreach (var item in group)
                        {
                            <td>
                                <button class="image-button @CodexPageUtil.GetMarginCss(itemBundle.Count)" type="button" @onclick="@(() => CodexModalState.SetSelectedItem(item.ClassName))">
                                    <img class="@CodexPageUtil.GetImageSizeCss(itemBundle.Count)" src=@item.IconPath alt=@item.ClassName />
                                    <div class="font-16 mt-4">@item.DisplayName</div>
                                </button>
                            </td>
                        }
                    </tr>
                }
            </table>
        </td>
    </tr>
</table>


@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
    }

    private List<CodexEntry> GetItems()
    {
        var items = selectedEntry.GetEntries();

        return CodexState.FetchItems(items);
    }
}

@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services;
@using SatisfactoryProductionator.Utilities;

@inject CodexModalState CodexModalState;
@inject CodexState CodexState;

@implements IDisposable

<table class="page-table w99">
    <tr>
        <td colspan="4" class="page-header">@selectedEntry.GetPageHeader().FormatCategoryName()</td>
    </tr>
    <tr>
        <td>
            @{ var itemBundle = selectedEntry.BundleInputs(GetRecipes(), rowSplit: 3); }
            <table class="flex-even d-block">
                @foreach(var group in itemBundle)
                {
                <tr class="flex-even w99">
                    @foreach (var item in group)
                    {
                        <td>
                            <button class="image-button @CodexPageUtil.GetMarginCss(itemBundle.Count)" type="button" @onclick="@(() => CodexModalState.SetSelectedItem(item.Key!))">
                                    <img class="@CodexPageUtil.GetImageSizeCss(itemBundle.Count)" src=@CodexState.FetchIconPath(item.Key) alt=@item.Key />
                                @if (item.Value[0] > 0)
                                {
                                    <div class="font-16 mt-4">@Math.Round(item.Value[0], 2)</div>
                                }
                                else
                                {
                                    <div class="font-16 mt-4">@CodexState.FetchDisplayName(item.Key)</div>
                                }
                            </button>
                        </td>
                    }
                </tr>
                }
            </table>
        </td>
    </tr>
</table>

@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
    }

    private List<Recipe> GetRecipes()
    {
        var recipeNames = selectedEntry.GetEntries();

        return CodexState.FetchRecipes(recipeNames);
    }
}

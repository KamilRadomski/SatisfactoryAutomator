@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services;

@inject CodexModalState CodexModalState;
@inject CodexState CodexState;

@implements IDisposable


<table class="page-table">
    @{
        _currentRecipeType = RecipeType.Default;
    }
    @foreach (var recipe in GetRecipes())
    {
        if (_currentRecipeType == RecipeType.Default || (selectedEntry.GetPageType() is PageType.Main && _currentRecipeType == RecipeType.Basic && recipe.RecipeType == RecipeType.Alternate))
        {
            _currentRecipeType = recipe.RecipeType;
            <tr>
                <td colspan="4" class="page-header">@GetPageHeader(recipe).FormatCategoryName()</td>
            </tr>
        }

        <tr>
            <td>
                @if (recipe.RecipeType is RecipeType.Basic)
                {
                    @* <div class=@CssIsDefault(recipe)> *@
                    <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="recipe basic">
                        <button type="button" class="recipe-btn" @onclick="@(() => CodexModalState.SetSelectedRecipe(recipe.ClassName))">
                            @recipe.DisplayName.FormatDisplayName()
                        </button>
                    </div>
                    @*   </div> *@
                }
                else
                {
                    @* <div class=@CssIsDefault(recipe)> *@
                    <div data-augmented-ui="tl-2-clip-x tr-2-clip-x br-2-clip-x b-clip-x bl-2-clip-x border" class="recipe alt">
                        <button type="button" class="recipe-btn" @onclick="@(() => CodexModalState.SetSelectedRecipe(recipe.ClassName))">
                            @recipe.DisplayName.FormatDisplayName()
                        </button>
                    </div>
                    @* </div> *@
                }

            </td>
            <td>
                <table>
                    <tr>
                        @foreach (var item in recipe.Inputs!)
                        {
                            <td>
                                <button class="image-button" type="button" @onclick="@(() => CodexModalState.SetSelectedItem(item.Key!))">
                                    <img class="image-64" src=@CodexState.FetchIconPath(item.Key) alt=@item.Key />
                                    <div class="font-12">@Math.Round(item.Value[1], 2)/min</div>
                                </button>
                            </td>
                        }
                    </tr>
                </table>
            </td>
            <td> >>> </td>
            <td>
                <table>
                    <tr>
                        @foreach (var item in recipe.Outputs!)
                        {
                            <td>
                                <button class="image-button" type="button" @onclick="@(() => CodexModalState.SetSelectedItem(@item.Key!))">
                                    <img class="image-64" src=@CodexState.FetchIconPath(item.Key) alt=@item.Key />
                                    <div class="font-12">@Math.Round(item.Value[1], 2)/min</div>
                                </button>
                            </td>
                        }
                    </tr>
                </table>
            </td>
        </tr>
    }
</table>

@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    private RecipeType _currentRecipeType { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
    }

    private List<Recipe> GetRecipes()
    {
        var recipeNames = selectedEntry.GetEntries();

        var test = CodexState.FetchRecipes(recipeNames);

        return CodexState.FetchRecipes(recipeNames);
    }

    private string GetPageHeader(Recipe recipe)
    {
        var pageType = selectedEntry.GetPageType();

        return pageType != PageType.Main ? pageType.ToString() : recipe.RecipeType.ToString();
    }
}

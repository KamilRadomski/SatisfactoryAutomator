@using SatisfactoryProductionator.Components.CodexModal.ExtraInfo
@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Services;

@inject CodexModalState CodexModalState;

@implements IDisposable;

<div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="info-panel-details">
    @if(selectedEntry != null)
    {
        if(selectedEntry.CodexEntry.CodexCategory is CodexCategory.Item)
        {
            <RecipeExtraInfo />
        }
        else if (selectedEntry.CodexEntry.CodexCategory is CodexCategory.Infrastructure)
        {
            <InfrastructureExtraInfo />
        }
        else if (selectedEntry.CodexEntry.CodexCategory is CodexCategory.Unlock)
        {
            <UnlocksExtraInfo />
        }
        else
        {
            <FillerExtraInfo />
        }       
    }
</div>

@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
    }
}

@using SatisfactoryProductionator.Components.CodexModal.Pages
@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.Services;
@using SatisfactoryProductionator.Extensions;

@inject CodexModalState CodexModalState;
@inject CodexState CodexState;

@implements IDisposable;

@if (selectedEntry.CodexEntry.CodexItemType is CodexItemType.Ores || exclusions.Contains(selectedEntry.CodexEntry.ClassName))
{
    <FillerExtraInfo />
}
else
{
    if (string.IsNullOrEmpty(selectedEntry.SelectedRecipe))
    {
        SetRecipe();
    }

    FetchRecipeAndBuilding();

    if (selectedRecipe == null || selectedBuilding == null)
    {
        <FillerExtraInfo />
    }
    else
    {
        <div class="panel-left">
            <div class="panel-title">@selectedRecipe.DisplayName.FormatDisplayName()</div>
            <table class="panel-table">
                <tr>
                    <td class="row-title">Inputs</td>
                </tr>
                <tr>
                    @foreach (var item in selectedRecipe.Inputs!)
                    {
                        <td>
                            <button class="image-button" type="button" @onclick="@(() => CodexModalState.SetSelectedItem(item.Key))">
                                <img class="image-64" src=@CodexState.FetchIconPath(item.Key) alt=@item.Key />
                                <div class="font-12">X @item.Value[0]</div>
                            </button>
                        </td>
                    }
                </tr>
                <tr>
                    <td class="row-title">Outputs</td>
                </tr>
                <tr>
                    @foreach (var item in selectedRecipe.Outputs)
                    {
                        <td>
                            <button class="image-button" type="button" @onclick="@(() => CodexModalState.SetSelectedItem(item.Key))">
                                <img class="image-64" src=@CodexState.FetchIconPath(item.Key) alt=@item.Key />
                                <div class="font-12">X @item.Value[0]</div>
                            </button>
                        </td>
                    }
                </tr>

            </table>
        </div>

        <div class="panel-right">
            <button class="image-button" type="button" @onclick="@(() => CodexModalState.SetSelectedItem(selectedBuilding.ClassName))">
                <img class="building-image" src=@selectedBuilding.IconPath alt=@selectedBuilding.DisplayName />
            </button>
            <div class="building-name">@selectedBuilding.DisplayName</div>
            <div class="font-12">@selectedBuilding.PowerRating[0] MW</div>
            <div class="font-12">@selectedRecipe.BuildTime Seconds</div>
            <div data-augmented-ui="tl-clip-x tr-clip-y br-clip-x bl-clip-y border" class="default-wrapper">
                <button class="image-button default-btn" type="button" @onclick="@(() => SetDefaultRecipe(selectedRecipe.ClassName))">Set As Default</button>
            </div>
        </div>
    }
}

@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    public Recipe selectedRecipe { get; set; }
    public Building selectedBuilding { get; set; }

    public List<string> exclusions = new()
    {
        "HUBParts",

    };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
    }

    public void FetchRecipeAndBuilding()
    {
        if (selectedEntry.SelectedRecipe == null) return;

        selectedRecipe = CodexState.FetchRecipe(selectedEntry.SelectedRecipe);
        if (selectedRecipe != null)
        {
            selectedBuilding = CodexState.FetchBuilding(selectedRecipe.Building);
        }
    }

    public void SetRecipe()
    {
        var entries = selectedEntry.GetEntries();

        if (entries.Count > 0)
        {
            selectedEntry.SelectedRecipe = entries.First();
        }
    }

    public void SetDefaultRecipe(string name)
    {
        //TODO Implement when settings are built
    }


}

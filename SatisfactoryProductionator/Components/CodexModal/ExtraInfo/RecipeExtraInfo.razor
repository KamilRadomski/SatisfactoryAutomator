@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Services;

@inject CodexModalState CodexModalState;

@implements IDisposable;

<div>
    @*
    <div class="info-panel-details-right">
    <img class="info-panel-details-building" src=@GetIconLocation(_recipeDetails!.Building!) alt=@_recipeDetails.Building />
    <div class="info-panel-details-building-name">@_recipeDetails.Building</div>
    <div class="info-panel-details-building-mw">@GetPower(_recipeDetails.Building)MW</div>
    <div class="info-panel-details-building-mw">@_recipeDetails.BuildTime Seconds</div>
    <div data-augmented-ui="tl-clip-x tr-clip-y br-clip-x bl-clip-y border" class="info-panel-details-default-aug">
    <button type="button" @onclick="@(() => SetDefaultRecipe(_recipeDetails))" class="info-panel-details-default">Set As Default</button>
    </div>
    </div>
    } *@
</div>


@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
    }
}

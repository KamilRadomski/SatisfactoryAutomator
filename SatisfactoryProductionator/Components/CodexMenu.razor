@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services;

@inject CodexState CodexState
@inject CodexMenuState CodexMenuState
@inject CodexModalState CodexModalState

<div data-augmented-ui-reset></div>

<div data-augmented-ui="tl-clip tr-2-clip-y br-clip bl-clip border" class="pos-abs codex-menu">
    <div data-augmented-ui-reset></div>
    <div data-augmented-ui="tl-clip tr-2-clip-y br-clip bl-2-clip-x border" class="sub-menu">
        <div data-augmented-ui-reset>
            <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="sub sub-u">
                <button type="button" class="sub-btn @activeU" @onclick="@(() => SetSelectedCategory(CodexCategory.Item))">
                    <div class="pos-abs text-u">Items</div>
                </button>
            </div>
            <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip r-clip border" class="sub sub-l">
                <button type="button" class="sub-btn @activeL" @onclick="@(() => SetSelectedCategory(CodexCategory.Equipment))">
                    <div class="pos-abs text-l">Gear</div>
                </button>
            </div>
            <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="sub sub-c">
                <button type="button" class="sub-btn @activeC" @onclick="@(() => SetSelectedCategory(CodexCategory.Building))">
                    <div class="pos-abs text-c">Buildings</div>
                </button>
            </div>
            <div data-augmented-ui="tl-clip tr-clip-y br-clip bl-clip l-clip border" class="sub sub-r">
                <button type="button" class="sub-btn @activeR" @onclick="@(() => SetSelectedCategory(CodexCategory.Unlock))">
                    <div class="pos-abs text-r">Tiers</div>
                </button>
            </div>
            <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip-x border" class="sub sub-d">
                <button type="button" class="sub-btn @activeD" @onclick="@(() => SetSelectedCategory(CodexCategory.Infrastructure))">
                    <div class="pos-abs text-d">Infrastructure</div>
                </button>
            </div>
        </div>
    </div>

    <div data-augmented-ui="tr-clip br-2-clip-y l-clip-y border" class="pos-abs btn-modal">
        <button type="button" class="image-button btn-toggle" @onclick=ToggleModal>
            <div class="modal-text">Info</div>
        </button>
    </div>

    <div data-augmented-ui="tl-clip tr-2-clip-y br-2-clip-x bl-clip border" class="pos-abs infra-sub-menu @GetInfraMenuActiveCss()">
        <div data-augmented-ui-reset></div>
        <div data-augmented-ui="tl-clip-x tr-clip br-clip-x bl-clip-x border" class="pos-abs infra infra-foundation">
            <button type="button" class="sub-btn @activeFoundation" @onclick="@(() => SetSelectedInfrastructure(InfrastructureSubCategory.Foundations))">
                <div class="pos-abs text-foundation">Foundations</div>
            </button>
        </div>
        <div data-augmented-ui="t-clip-x r-clip b-clip-x l-clip  border" class="pos-abs infra infra-wall">
            <button type="button" class="sub-btn @activeWalls" @onclick="@(() => SetSelectedInfrastructure(InfrastructureSubCategory.WallsRoofs))">
                <div class="pos-abs text-walls-roofs">Walls / Roofs</div>
            </button>
        </div>
        <div data-augmented-ui=" tl-clip-x tr-clip-x br-2-clip-x bl-clip border" class="pos-abs infra infra-general">
            <button type="button" class="sub-btn @activeGeneral" @onclick="@(() => SetSelectedInfrastructure(InfrastructureSubCategory.General))">
                <div class="pos-abs text-general">General</div>
            </button>
        </div>
    </div>

    <div data-augmented-ui="tl-clip tr-2-clip-x br-2-clip-x bl-2-clip-y border" class="pos-abs unlock-sub-menu @GetUnlockMenuActiveCss()">
        <div data-augmented-ui-reset></div>
        <div data-augmented-ui="tl-clip-x tr-clip br-2-clip-x bl-2-clip-x border" class="pos-abs infra unlock-milestone">
            <button type="button" class="sub-btn @activeMilestone" @onclick="@(() => SetSelectedUnlock(UnlockSubCategory.Milestone))">
                <div class="pos-abs text-milestone">Milestones</div>
            </button>
        </div>
        <div data-augmented-ui="tl-clip t-clip-x tr-clip br-2-clip-x bl-2-clip-x border" class="pos-abs infra unlock-mam">
            <button type="button" class="sub-btn @activeMam" @onclick="@(() => SetSelectedUnlock(UnlockSubCategory.Mam))">
                <div class="pos-abs text-mam">MAM</div>
            </button>
        </div>
        <div data-augmented-ui="tl-clip t-clip-x tr-clip br-2-clip-x bl-clip border" class="pos-abs infra unlock-shop">
            <button type="button" class="sub-btn @activeShop" @onclick="@(() => SetSelectedUnlock(UnlockSubCategory.Shop))">
                <div class="pos-abs text-shop">Awesome Shop</div>
            </button>
        </div>
    </div>

    @if (CodexState.Codex == null)
    {
        <div class="pos-rel loading">Loading....</div>
    }
    else
    {
        <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="pos-abs mt-8 nav-wrapper @GetQuickNavOffsetCss()">
            <div data-augmented-ui-reset></div>
            <div class="pos-abs list-wrapper @GetListWrapperSizeCss()">

                @{
                    var names = GetGroupNames();
                    InitializeList(names.Count);
                }
                <ul class="nav-list">

                    @for (int i = 0; i < names.Count; i++)
                    {
                        <li class="nav-li">
                            <div data-augmented-ui="@GetTopButton() @GetBottomButton() border" class="nav @GetButtonCss()">
                                <button type="button" class="nav-btn" onclick="document.getElementById('@names[i]').scrollIntoView({behavior:'smooth'})">
                                    <div class="pos-rel nav-text">@names[i].FormatCategoryName()</div>
                                </button>
                            </div>
                            
                           @*  @if (i == 0)
                            {
                                <div data-augmented-ui="tl-clip tr-clip br-2-clip-x bl-clip border" class="nav nav-0">
                                    <button type="button" class="nav-btn" onclick="document.getElementById('@names[i]').scrollIntoView({behavior:'smooth'})">
                                        <div class="pos-rel nav-text">@names[i].FormatCategoryName()</div>
                                    </button>
                                </div>
                            }
                            else if (i != names.Count - 1)
                            {
                                <div data-augmented-ui="tl-2-clip-x tr-clip br-2-clip-x bl-clip border" class="nav nav-mid">
                                    <button type="button" class="nav-btn" onclick="document.getElementById('@names[i]').scrollIntoView({behavior:'smooth'})">
                                        <div class="pos-rel nav-text">@names[i].FormatCategoryName()</div>
                                    </button>
                                </div>
                            }
                            else
                            {
                                <div data-augmented-ui=" tl-2-clip-x tr-clip br-clip bl-clip border" class="nav nav-last">
                                    <button type="button" class="nav-btn" onclick="document.getElementById('@names[i]').scrollIntoView({behavior:'smooth'})">
                                        <div class="pos-rel nav-text">@names[i].FormatCategoryName()</div>
                                    </button>
                                </div>
                            } *@
                        </li>
                    }

                </ul>
            </div>
        </div>
    }
</div>

@code {
    private static string activeU;
    private static string activeL;
    private static string activeC;
    private static string activeR;
    private static string activeD;
    private static string activeFoundation;
    private static string activeWalls;
    private static string activeGeneral;
    private static string activeMilestone;
    private static string activeMam;
    private static string activeShop;

    private static int listCount;
    private static int index;
    private static int topIndex;
    private static int bottomIndex;


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        CodexState.OnStateChange += StateHasChanged;
        CodexModalState.OnStateChange += StateHasChanged;

        if (CodexState.Codex == null)
        {
            await CodexState.InitializeCodexAsync();
        }

        SetSelectedCategory(CodexMenuState.SelectedCategory);

        SetSelectedInfrastructure(CodexMenuState.SelectedInfrastructure);

        SetSelectedUnlock(CodexMenuState.SelectedUnlock);
    }

    public void Dispose()
    {
        CodexState.OnStateChange -= StateHasChanged;
        CodexModalState.OnStateChange -= StateHasChanged;
    }

    private List<string> GetGroupNames()
    {
        var category = CodexMenuState.SelectedCategory;

        if(category is CodexCategory.Infrastructure)
        {
            var infraCategory = CodexMenuState.SelectedInfrastructure;
            var infraItems = CodexState.Codex.CodexItems.Where(x => x.CodexCategory == CodexCategory.Infrastructure).ToList();

            var categoryNames = infraCategory switch
            {
                InfrastructureSubCategory.Foundations => infraItems.Where(x => x.CodexItemType is CodexItemType.Foundation)
                                                                   .Select(y => y.CodexSubItemType.ToString()).Distinct().ToList(),
                InfrastructureSubCategory.WallsRoofs => infraItems.Where(x => x.CodexItemType is CodexItemType.Wall ||
                                                                              x.CodexItemType is CodexItemType.Roof)
                                                                  .Select(y => y.CodexSubItemType.ToString()).Distinct().ToList(),
                InfrastructureSubCategory.General => infraItems.Where(x => x.CodexItemType is not CodexItemType.Default &&
                                                                           x.CodexItemType is not CodexItemType.Foundation &&
                                                                           x.CodexItemType is not CodexItemType.Wall &&
                                                                           x.CodexItemType is not CodexItemType.Roof)
                                                               .OrderBy(z => z.CodexSubItemType)
                                                               .Select(y => y.CodexSubItemType.ToString()).Distinct().ToList(),
            };

            return categoryNames;
        }
        else if(category is CodexCategory.Unlock)
        {
            var unlockCategory = CodexMenuState.SelectedUnlock;
            var unlockItems = CodexState.Codex.CodexItems.Where(x => x.CodexCategory == CodexCategory.Unlock).ToList();

            var categoryNames = unlockCategory switch
            {
                UnlockSubCategory.Milestone => unlockItems.Where(x => x.CodexItemType is CodexItemType.Milestones)
                                                          .Select(y => y.CodexSubItemType.ToString()).Distinct().ToList(),
                UnlockSubCategory.Mam => unlockItems.Where(x => x.CodexItemType is CodexItemType.Mam)
                                                    .Select(y => y.CodexSubItemType.ToString()).Distinct().ToList(),
                UnlockSubCategory.Shop => unlockItems.Where(x => x.CodexItemType is CodexItemType.AwesomeShop)
                                                     .Select(y => y.CodexSubItemType.ToString()).Distinct().ToList(),
            };

            return categoryNames;
        }
        else
        {
            return CodexState.Codex.CodexItems.Where(x => x.CodexCategory == category).Select(y => y.CodexItemType.ToString()).Distinct().ToList();
        }
    }

    private void SetSelectedCategory(CodexCategory category)
    {
        CodexMenuState.SetCategory(category);

        activeU = "";
        activeL = "";
        activeC = "";
        activeR = "";
        activeD = "";

        switch (category)
        {
            case CodexCategory.Item:
                activeU = "active";
                break;
            case CodexCategory.Equipment:
                activeL = "active";
                break;
            case CodexCategory.Building:
                activeC = "active";
                break;
            case CodexCategory.Infrastructure:
                activeD = "active";
                break;
            case CodexCategory.Unlock:
                activeR = "active";
                break;
        }
    }

    private void SetSelectedInfrastructure(InfrastructureSubCategory category)
    {
        CodexMenuState.SetInfrastructure(category);

        activeFoundation = "";
        activeWalls = "";
        activeGeneral = "";

        switch (category)
        {
            case InfrastructureSubCategory.Foundations:
                activeFoundation = "active";
                break;
            case InfrastructureSubCategory.WallsRoofs:
                activeWalls = "active";
                break;
            case InfrastructureSubCategory.General:
                activeGeneral = "active";
                break;
        }
    }

    private void SetSelectedUnlock(UnlockSubCategory category)
    {
        CodexMenuState.SetUnlock(category);

        activeMilestone = "";
        activeMam = "";
        activeShop = "";

        switch (category)
        {
            case UnlockSubCategory.Milestone:
                activeMilestone = "active";
                break;
            case UnlockSubCategory.Mam:
                activeMam = "active";
                break;
            case UnlockSubCategory.Shop:
                activeShop = "active";
                break;
        }
    }

    private void InitializeList(int count)
    {
        listCount = count;
        index = 0;
        topIndex = 0;
        bottomIndex = new Random().Next(1, 11);
    }

    private string GetTopButton()
    {
        return topIndex switch
        {
            0 => "tl-clip tr-clip",
            1 => "tl-2-clip-x tr-clip",
            2 => "tl-clip tr-2-clip-x",
            3 => "tl-clip tr-2-clip-x",
            4 => "tl-2-clip-x tr-clip",
            5 => "tl-2-clip-x tr-2-clip-x",
            6 => "tl-2-clip-x tr-2-clip-x",
            7 => "tl-2-clip-x tr-2-clip-x",
            8 => "tl-clip t-clip-x tr-clip",
            9 => "tl-clip t-clip-x tr-clip",
            10 => "tl-clip t-clip-x tr-clip",

        };
    }

    private string GetBottomButton()
    {
        if (index == listCount - 1)
        {
            bottomIndex = 0;
        }

        return bottomIndex switch
        {
            0 => "br-clip bl-clip",
            1 => "br-2-clip-x bl-clip",
            2 => "br-clip bl-2-clip-x",
            3 => "br-clip bl-2-clip-x",
            4 => "br-2-clip-x bl-clip",
            5 => "br-clip b-clip-x bl-clip",
            6 => "br-clip b-clip-x bl-clip",
            7 => "br-clip b-clip-x bl-clip",
            8 => "br-2-clip-x bl-2-clip-x",
            9 => "br-2-clip-x bl-2-clip-x",
            10 => "br-2-clip-x bl-2-clip-x",

        };
    }

    private string GetButtonCss()
    {
        var css = string.Empty;

        css += topIndex switch
        {
            0 => "t0",
            1 => "t1",
            2 => "t2",
            3 => "t3",
            4 => "t4",
            5 => "t5",
            6 => "t6",
            7 => "t7",
            8 => "t8",
            9 => "t9",
            10 => "t10"
        };

        if (index == listCount - 1)
        {
            bottomIndex = 0;
        }

        css += bottomIndex switch
        {
            0 => " b0",
            1 => " b1",
            2 => " b2",
            3 => " b3",
            4 => " b4",
            5 => " b5",
            6 => " b6",
            7 => " b7",
            8 => " b8",
            9 => " b9",
            10 => " b10"
        };

        topIndex = bottomIndex;
        bottomIndex = bottomIndex = new Random().Next(1, 11);
        index++;

        return css;
    }



    private void ToggleModal() => CodexModalState.ToggleCodexModal();

    private string GetListWrapperSizeCss() => (CodexMenuState.SelectedCategory is CodexCategory.Infrastructure || 
                                               CodexMenuState.SelectedCategory is CodexCategory.Unlock) ? "list-shrank" : "list-full";

    private string GetQuickNavOffsetCss() => (CodexMenuState.SelectedCategory is CodexCategory.Infrastructure ||
                                              CodexMenuState.SelectedCategory is CodexCategory.Unlock) ? "nav-active-offset" : "";
   
    private string GetInfraMenuActiveCss() => (CodexMenuState.SelectedCategory is CodexCategory.Infrastructure) ? "infra-active" : "";

    private string GetUnlockMenuActiveCss() => (CodexMenuState.SelectedCategory is CodexCategory.Unlock) ? "unlock-active" : "";
}

@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models.Graph;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services.States;

@inject PermState PermState
@inject CodexState CodexState

@implements IDisposable

<div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="page-wrapper">
    <div class="table-wrapper">
        <table class="perm-table">
            @if (!SuppressHeader)
            {
                <thead class="divider">
                    <tr>
                        <th>Options</th>
                        <th>Inputs</th>
                        <th>Outputs</th>
                        <th>Power</th>
                        <th>Items</th>
                        <th>Buildings</th>
                        <th>Building Cost</th>
                    </tr>
                </thead>
            }
            @foreach (var permutation in PermState.GetView())
            {
                <div data-augmented-ui-reset></div>
                <tr data-augmented-ui="tl-clip tr-clip bl-clip br-clip border" class="perm-row">

                    @* Options *@
                    <td class="divider">
                        <div class="options-btns flex-col">
                            <button type="button" class="icon-button btn-x center-content" @onclick="@(() => PermState.RemoveRow(permutation))">
                                <div class="btn-icon icon-close oi-x" aria-hidden="true"></div>
                            </button>

                            <button type="button" class="icon-button btn-x center-content" @onclick="@(() => SetDetailsPane(permutation))">
                                <div class="btn-icon oi-eye" aria-hidden="true"></div>
                            </button>

                            <button type="button" class="icon-button btn-x center-content" @onclick="@(() => SendToGrapher(permutation))">
                                <div class="btn-icon oi-fork" aria-hidden="true"></div>
                            </button>
                        </div>
                    </td>

                    @* Inputs *@
                    <td class="divider">
                        <div class="content-wrapper">
                            <table class="w100">
                                <tr>
                                    <td>
                                        <div class="flex-wrap flex-center item-list">
                                            @foreach (var (input, data) in permutation.Inputs)
                                            {
                                                <button class="image-button" type="button" @onclick="@(e => OnClickInputs(e, input.ClassName))">
                                                    <div class="flex-col flex-left m10">
                                                        <div class="flex self-align">
                                                            <img class="image-48" src=@input.IconPath alt=@input.DisplayName />
                                                            <div class="text">@Math.Round(data.Quantity,2)</div>
                                                        </div>
                                                        <div class="text">@GetInputText(input)</div>
                                                    </div>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </td>

                    @* Outputs *@
                    <td class="divider">
                        <table class="w100">
                            <tr>
                                <td>
                                    <div class="flex-wrap flex-center flex-col item-list">
                                        @foreach (var (output, data) in permutation.Outputs)
                                        {
                                            <button class="image-button" type="button" @onclick="@(e => OnClickOutputs(e, data.Recipe.ClassName))">
                                                <div class="flex-col flex-middle m10">
                                                    <div class="flex self-align">
                                                        <img class="image-48" src=@output.IconPath alt=@output.DisplayName />
                                                        <div class="text">@Math.Round(data.Quantity,2)</div>
                                                    </div>
                                                    <div class="text">@data.Recipe.DisplayName.FormatDisplayName()</div>
                                                    <div class="text">x @Math.Round(data.RecipeQuantity,2)</div>
                                                </div>
                                            </button>
                                        }

                                    </div>
                                </td>
                            </tr>
                        </table>
                    </td>

                    @* Power *@
                    <td class="divider">
                        <table class="w100">
                            <tr>
                                <td>

                                    <div class="flex-col flex-middle m10 item-list">
                                        <div class="flex self-align">
                                            <img class="image-80" src=@CodexState.FetchIconPath("GeneratorFuel") alt="GeneratorFuel" />
                                            <img class="image-48 img-down" src=@CodexState.FetchIconPath("LiquidFuel") alt="GeneratorFuel" />
                                        </div>
                                        <div class="text">@Math.Round(permutation.Power, 2) MW</div>
                                        <div class="text">@Math.Round(GetFuelConsumption(permutation.Power), 2) /Min</div>
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </td>

                    @* Items *@
                    <td class="divider">
                        <table class="w100">
                            <tr>
                                <td>
                                    <div class="flex-wrap flex-center item-list">
                                        @foreach (var (item, data) in permutation.Items)
                                        {
                                            <button class="image-button" type="button" @onclick="@(e => OnClickItems(e, item.ClassName, data.Recipe.ClassName))">
                                                <div class="flex-col flex-middle m10">
                                                    <div class="flex self-align">
                                                        <img class="image-48" src=@item.IconPath alt=@item.DisplayName />
                                                        <div class="text">@Math.Round(data.Quantity,2)</div>
                                                    </div>
                                                    <div class="text">@data.Recipe.DisplayName.FormatDisplayName()</div>
                                                    <div class="text">x @Math.Round(data.RecipeQuantity,2)</div>
                                                </div>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </td>

                    @* Buildings *@
                    <td class="divider">
                        <table class="w100">
                            <tr>
                                <td>
                                    <div class="flex-wrap flex-center item-list">
                                        @foreach (var (building, quantity) in permutation.Buildings)
                                        {
                                            <button class="image-button" type="button" @onclick="@(e => OnClickBuildings(e, building.ClassName))">
                                                <div class="flex-col flex-middle m10">
                                                    <div class="flex self-align">
                                                        <img class="image-48" src=@building.IconPath alt=@building.ClassName />
                                                        <div class="text"> @quantity</div>
                                                    </div>
                                                    <div class="text">@building.DisplayName.FormatDisplayName()</div>

                                                </div>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </td>

                    @* Infra Cost *@
                    <td>
                        <table class="w100">
                            <tr>
                                <td>
                                    <div class="flex-wrap flex-center item-list">
                                        @foreach (var (item, quantity) in permutation.Cost)
                                        {
                                            <button class="image-button" type="button" @onclick="@(e => OnClickInfra(e, item.ClassName))">
                                                <div class="flex-col flex-left m10">
                                                    <div class="flex self-align">
                                                        <img class="image-48" src=@item.IconPath alt=@item.ClassName />
                                                        <div class="text">@Math.Round(quantity,2)</div>
                                                    </div>
                                                    <div class="text">@item.DisplayName.FormatDisplayName()</div>
                                                </div>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
            }
        </table>
    </div>
</div>



@code {
    [Parameter]
    public bool SuppressHeader { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        // MenuState.OnStateChange += StateHasChanged;
        // AppModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
        PermState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        // MenuState.OnStateChange -= StateHasChanged;
        // AppModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
        PermState.OnStateChange -= StateHasChanged;
    }

    private void SetDetailsPane(NewPermutation permutation)
    {
        //Have PermState hold css vars

        // DetailsClass = "frozen-small";
        // DetailsOpen = true;
        // PermState.GenerateGraphNodes(permutation);
    }

    private void SendToGrapher(NewPermutation permutation)
    {

    }

    private void OnClickInputs(MouseEventArgs e, string className)
    {
        if (e.ShiftKey)
        {
            if (PermState.Imports.Contains(className))
            {
                PermState.Imports.Remove(className);
                PermState.GeneratePermutations(false, false);
            }
            else
            {
                PermState.Imports.Add(className);
                PermState.GeneratePermutations(false, false);
            }
        }
        else
        {
            if (PermState.Filters.Inputs.Contains(className))
            {
                PermState.Filters.Inputs.Remove(className);
                PermState.RemoveFilter(FilterType.Input);
            }
            else
            {
                PermState.ApplyFilter(FilterType.Input, className);
            }
        }

    }

    private void OnClickOutputs(MouseEventArgs e, string recipeName)
    {
        if (PermState.Filters.Recipes.Contains(recipeName))
        {
            PermState.Filters.Recipes.Remove(recipeName);
            PermState.RemoveFilter(FilterType.Recipe);
        }
        else
        {
            PermState.ApplyFilter(FilterType.Recipe, recipeName);
        }
    }

    private void OnClickItems(MouseEventArgs e, string className, string recipeName)
    {
        if (e.ShiftKey)
        {
            if (PermState.Imports.Contains(className))
            {
                PermState.Imports.Remove(className);
                PermState.GeneratePermutations(false, false);
            }
            else
            {
                PermState.Imports.Add(className);
                PermState.GeneratePermutations(false, false);
            }
        }
        else if (e.CtrlKey)
        {
            if (PermState.Filters.Items.Contains(className))
            {
                PermState.Filters.Items.Remove(className);
                PermState.RemoveFilter(FilterType.Item);
            }
            else
            {
                PermState.ApplyFilter(FilterType.Item, className);
            }
        }
        else
        {
            if (PermState.Filters.Recipes.Contains(recipeName))
            {
                PermState.Filters.Recipes.Remove(recipeName);
                PermState.RemoveFilter(FilterType.Recipe);
            }
            else
            {
                PermState.ApplyFilter(FilterType.Recipe, recipeName);
            }
        }
    }

    private void OnClickBuildings(MouseEventArgs e, string className)
    {

        if (PermState.Filters.Buildings.Contains(className))
        {
            PermState.Filters.Buildings.Remove(className);
            PermState.RemoveFilter(FilterType.Building);
        }
        else
        {
            PermState.ApplyFilter(FilterType.Building, className);
        }
    }

    private void OnClickInfra(MouseEventArgs e, string className)
    {

        if (PermState.Filters.Costs.Contains(className))
        {
            PermState.Filters.Costs.Remove(className);
            PermState.RemoveFilter(FilterType.Cost);
        }
        else
        {
            PermState.ApplyFilter(FilterType.Cost, className);
        }

    }

    private string GetInputText(Item item)
    {
        var name = item.DisplayName.FormatDisplayName();

        if (PermState.TotalImports.Contains(item.ClassName))
        {
            return $"({name})";
        }
        else
        {
            return name;
        }
    }

    private double GetFuelConsumption(double power)
    {
        var gensNeeded = power / 150;
        return Math.Round(gensNeeded * 12, 2);
    }
}

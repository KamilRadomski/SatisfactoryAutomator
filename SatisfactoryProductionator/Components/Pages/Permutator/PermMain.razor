@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.Services.States;

@inject PermState PermState;

<div data-augmented-ui="tl-clip tr-clip br-clip bl-2-clip-y border" class="pos-abs perm-wrapper @GetPermSizing()">
    <div data-augmented-ui-reset></div>
    @if (!PermState.Permutations.Any())
    {
        <div class="pos-abs loading">Add Items To Permutate .....</div>
    }
    else
    {
        <PermTable IsDetailRow=false />

        <PermutatorFooter />
    }
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        // MenuState.OnStateChange += StateHasChanged;
        // AppModalState.OnStateChange += StateHasChanged;
        // CodexState.OnStateChange += StateHasChanged;
        PermState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        // MenuState.OnStateChange -= StateHasChanged;
        // AppModalState.OnStateChange -= StateHasChanged;
        // CodexState.OnStateChange -= StateHasChanged;
        PermState.OnStateChange -= StateHasChanged;
    }

    private string GetPermSizing()
    {
        var permToggle = PermState.GetPermToggles();

        return permToggle switch
        {
            PermToggles.Default => "perm-def",
            PermToggles.Filter => "perm-filter-on",
            PermToggles.FilterDetail => "perm-filter-details-on",
            PermToggles.FilterDetailExpanded => "perm-filter-expanded-on",
            PermToggles.Detail => "perm-details-on",
            PermToggles.DetailExpanded => "perm-expanded-on",
            _ => string.Empty
        };
    }
}

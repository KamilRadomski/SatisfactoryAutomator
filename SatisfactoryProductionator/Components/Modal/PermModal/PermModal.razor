@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.Services;

@inject PermModalState PermModalState;
@inject CodexState CodexState;

@implements IDisposable;

<div data-augmented-ui="tl-2-clip-y tr-2-clip-x br-clip bl-clip border" class="top-panel">
    <div data-augmented-reset></div>
    <div data-augmented-ui="br-clip bl-clip border" class="top-panel-inner">


        <div data-augmented-ui="all-hex border" class="pos-abs perm-close btn-outer center-content">
            <div data-augmented-ui-reset></div>
            <button type="button" class="btn-x center-content" @onclick=@PermModalState.CloseModal>
                <div data-augmented-ui="all-hex border" class="btn-middle center-content">
                    <div data-augmented-ui-reset></div>
                    <div data-augmented-ui="all-hex border" class="btn-inner center-content">
                        <div data-augmented-ui-reset></div>
                        <div class="btn-icon icon-close oi-x" aria-hidden="true"></div>
                    </div>
                </div>
            </button>
        </div>
    </div>
</div>

<div data-augmented-ui="tl-clip tr-clip br-2-clip-y bl-2-clip-x border" class="bottom-panel">
    <div data-augmented-reset></div>
    <div data-augmented-ui="tl-clip tr-clip border" class="bottom-panel-inner">
        <Automatables />
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();

        PermModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        PermModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
    }

    public List<Item> GetItems()
    {
        var items = CodexState.GetAutomatableItems();

        return items;
    }
}

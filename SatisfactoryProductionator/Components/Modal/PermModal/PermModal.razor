@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services;
@using SatisfactoryProductionator.Services.States;

@inject PermModalState PermModalState;
@inject PermState PermState;
@inject CodexState CodexState;

@implements IDisposable;



<div data-augmented-ui="tl-2-clip-y tr-2-clip-x br-clip bl-clip border" class="top-panel">
    <div data-augmented-reset></div>
    <div data-augmented-ui="br-clip bl-clip border" class="top-panel-inner">

        <div data-augmented-ui="tl-2-clip-y tr-clip br-2-clip-y bl-clip border" class="selected-list">
            <div class="list-wrapper">
                @if (PermState.Items.Any())
                {
                    <div class="item-wrapper">
                        <div class="hor-line">
                            <span>Items</span>
                        </div>
                        @foreach (var item in PermState.Items)
                        {
                            <button class="image-button m5" type="button" @onclick="@(() => PermModalState.SetSelectedItem(item.Key, item.Value))">
                                <img class="image-96" src=@CodexState.FetchIconPath(item.Key) alt=@item.Key />
                                <div class="text">@CodexState.FetchDisplayName(item.Key).FormatDisplayName()</div>
                                <div class="amount">@item.Value</div>
                            </button>
                        }
                    </div>
                }
                @if (PermState.Imports.Any())
                {
                    <div class="imports-wrapper">
                        <div class="hor-line">
                            <span>Imports</span>
                        </div>
                        @foreach (var item in PermState.Imports)
                        {
                            <button class="image-button m5" type="button" @onclick="@(() => PermModalState.SetSelectedItem(item, 0))">
                                <img class="image-96" src=@CodexState.FetchIconPath(item) alt=@item />
                                <div class="text">@CodexState.FetchDisplayName(item).FormatDisplayName()</div>
                            </button>
                        }

                    </div>
                }
            </div>
        </div>

        <div data-augmented-ui="tl-2-clip-y tr-clip br-clip bl-clip border" class="selected-perm">
            <div data-augmented-reset></div>
            @if (PermModalState.SelectedItem == null)
            {
                <div class="select-item-text">Select Item</div>
            }
            else
            {
                var item = PermModalState.SelectedItem;

                <div class="pos-abs selected-text">@item.DisplayName</div>

                <div class="pos-abs img-container">
                    <img class="image-96 pos-abs selected-image" src=@PermModalState.SelectedItem.IconPath alt=@PermModalState.SelectedItem.ClassName />
                </div>

                <div class="pos-abs recipe-container">
                    @foreach(var recipe in GetSelectedRecipes())
                    {
                        <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="recipe @IsExcluded(recipe)">
                            <button type="button" class="aug-btn" @onclick="@(() => PermState.ToggleExcluded(recipe))">
                                <span>@CodexState.FetchRecipe(recipe).DisplayName.FormatDisplayName()</span>
                            </button>
                        </div>
                    }
                </div>

                <div class="pos-abs input-container">

                    <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="pos-abs remove-btn">
                        <button type="button" class="btn-full" @onclick="@(() => PermModalState.RemoveSelected(item.ClassName))">
                            <span class="font-14">@GetDeleteText()</span>
                        </button>
                    </div>
                    <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="pos-abs import-btn">
                        <button type="button" class="btn-full" @onclick="@(() => PermModalState.ImportSelected(item.ClassName))">
                            <span class="font-14">Import</span>
                        </button>
                    </div>
                    <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="pos-abs add-update-btn">
                        <button type="button" class="btn-full" @onclick="@(() => PermModalState.AddUpdateSelected(item.ClassName, Amount))">
                            <span class="font-14">@GetAddText()</span>
                        </button>
                    </div>

                    <div data-augmented-ui="tl-2-clip-x tr-2-clip-x bl-clip br-clip border" class="pos-abs input-range">
                        @{
                            Amount = PermModalState.SelectAmount;
                        }
                       
                        <input type="text" maxlength="5" @bind="Amount" @oninput="UpdateAmount" @onblur="SetAmount" class="num-input no-spin" />

                        <div class="flex-middle selector-bar">
                            <div data-augmented-reset></div>
                            <div data-augmented-ui="tl-clip r-clip bl-clip border" class="flex-middle sub-btn sub-100">
                                <button type="button" class="btn-full" @onclick="@(() => PermModalState.AddAmount(-100))">
                                    <span>100</span>
                                </button>

                            </div>
                            <div data-augmented-ui="tl-clip r-clip bl-clip border" class="flex-middle sub-btn sub-10">
                                <button type="button" class="btn-full" @onclick="@(() => PermModalState.AddAmount(-10))">
                                    <span>10</span>
                                </button>
                            </div>
                            <div data-augmented-ui="tl-clip r-clip bl-clip border" class="flex-middle sub-btn sub-1">
                                <button type="button" class="btn-full" @onclick="@(() => PermModalState.AddAmount(-1))">
                                    <span>1</span>
                                </button>
                            </div>

                            <div data-augmented-ui="tr-clip l-clip br-clip border" class="flex-middle add-btn add-1">
                                <button type="button" class="btn-full" @onclick="@(() => PermModalState.AddAmount(1))">
                                    <span>1</span>
                                </button>
                            </div>
                            <div data-augmented-ui="tr-clip l-clip br-clip border" class="flex-middle add-btn add-10">
                                <button type="button" class="btn-full" @onclick="@(() => PermModalState.AddAmount(10))">
                                    <span>10</span>
                                </button>
                            </div>
                            <div data-augmented-ui="tr-clip l-clip br-clip border" class="flex-middle add-btn add-100">
                                <button type="button" class="btn-full" @onclick="@(() => PermModalState.AddAmount(100))">
                                    <span>100</span>
                                </button>
                            </div>
                        </div>

                    </div>
                </div>
            }



        </div>

        <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="btn-bar">
            <div data-augmented-ui="all-hex border" class="perm-close btn-outer center-content">
                <div data-augmented-ui-reset></div>
                <button type="button" class="btn-x center-content" @onclick=@PermModalState.CloseModal>
                    <div data-augmented-ui="all-hex border" class="btn-middle center-content">
                        <div data-augmented-ui-reset></div>
                        <div data-augmented-ui="all-hex border" class="btn-inner center-content">
                            <div data-augmented-ui-reset></div>
                            <div class="btn-icon icon-close oi-x" aria-hidden="true"></div>
                        </div>
                    </div>
                </button>
            </div>
            <div data-augmented-ui="all-hex border" class="btn-outer center-content">
                <div data-augmented-ui-reset></div>
                <button type="button" class="btn-clear center-content" @onclick=@PermModalState.ClearItems>
                    <div data-augmented-ui="all-hex border" class="btn-middle center-content">
                        <div data-augmented-ui-reset></div>
                        <div data-augmented-ui="all-hex border" class="btn-inner center-content">
                            <div data-augmented-ui-reset></div>
                            <span class="btn-icon oi-trash" aria-hidden="true"></span>
                        </div>
                    </div>
                </button>
            </div>
        </div>
    </div>
</div>

<div data-augmented-ui="tl-clip tr-clip br-2-clip-y bl-2-clip-x border" class="bottom-panel">
    <div data-augmented-reset></div>
    <div data-augmented-ui="tl-clip tr-clip border" class="bottom-panel-inner">
        <Automatables />
    </div>
</div>

@code {
    private static double Amount;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        PermModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
        PermState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        PermModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
        PermState.OnStateChange -= StateHasChanged;
    }

    public List<Item> GetItems()
    {
        var items = CodexState.GetAutomatableItems();

        return items;
    }

    public void SetAmount()
    {
        PermModalState.SetAmount(Amount);
    }

    public void UpdateAmount(ChangeEventArgs e)
    {
        var input = e.Value.ToString();

        if (int.TryParse(e.Value.ToString(), out int result))
        {
            if (input.Length <= 5 && result <= 10000)
            {
                Amount = result;
            }
            else
            {
                Amount = 10000;
            }
        }

        SetAmount();
    }

    private List<string> GetSelectedRecipes()
    {
        return PermModalState.SelectedItem.AutoRecipes
            .Where(x => !x.StartsWith("Recipe_Unpackage") && !x.StartsWith("Recipe_Alternate_RecycledRubber") && !x.StartsWith("Recipe_Alternate_Plastic")).ToList();
    }

    public string GetDeleteText() => PermModalState.IsItemAdded() ? "Delete" : "Clear";
    public string GetAddText() => PermModalState.IsItemAdded() ? "Update" : "Add";
    public string IsExcluded(string recipeName) => PermState.IsExcludedRecipe(recipeName) ? "excluded" : "";
}

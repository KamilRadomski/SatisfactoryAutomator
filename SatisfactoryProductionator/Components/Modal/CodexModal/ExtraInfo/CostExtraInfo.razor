@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models.Modal;
@using SatisfactoryProductionator.Services.States;

@inject CodexModalState CodexModalState;
@inject CodexState CodexState;

@implements IDisposable

@{
    cost = GetCost();
}

@if (cost.ItemCost.Count == 0)
{
    <FillerExtraInfo />
}
else
{
    <table class="page-table w99">
        <tr>
            <td colspan="4" class="page-header">Cost</td>
        </tr>
        <tr>
            <td>
                @{
                    var itemBundle = BundleItems();
                }
                <table class="flex-even d-block">
                    @foreach (var group in itemBundle)
                    {
                        <tr class="flex-even w99">
                            @foreach (var item in group)
                            {
                                <td>
                                    <button class="image-button mt-4" type="button" @onclick="@(() => CodexModalState.SetSelectedItem(item.Key!))">
                                        <img class="@GetImageSizeCss(itemBundle.Count)" src=@CodexState.FetchIconPath(item.Key) alt=@item.Key />
                                        @if (item.Value > 0)
                                        {
                                            <div class="font-16 mt-4">@Math.Round(item.Value, 2)</div>
                                        }
                                        else
                                        {
                                            <div class="font-16 mt-4">@CodexState.FetchDisplayName(item.Key)</div>
                                        }
                                    </button>
                                </td>
                            }
                        </tr>
                    }
                </table>
            </td>
        </tr>
    </table>
}

@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }
    public Cost cost { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
    }

    private Cost GetCost()
    {
        switch(selectedEntry.CodexEntry.CodexCategory)
        {
            case CodexCategory.Building:
                return (selectedEntry.CodexEntry as Building)!.Cost;

            case CodexCategory.Infrastructure:
                return (selectedEntry.CodexEntry as Infrastructure)!.Cost;

            case CodexCategory.Equipment:
                return (selectedEntry.CodexEntry as Equipment)!.Cost;

            case CodexCategory.Unlock:
                return (selectedEntry.CodexEntry as Unlock)!.Cost;

            default: return new Cost() {ItemCost = new Dictionary<string, double>()};
        }
    }

    private List<List<KeyValuePair<string, double>>> BundleItems()
    {
        List<List<KeyValuePair<string, double>>> items = new();

        var inputs = cost.ItemCost.ToList();

        if (inputs.Count < 6)
        {
            items.Add(inputs);

            return items;
        }

        var tempList = new List<KeyValuePair<string, double>>();

        foreach (var entry in inputs)
        {
            tempList.Add(entry);

            if (tempList.Count % 3 == 0)
            {
                items.Add(tempList);
                tempList = new List<KeyValuePair<string, double>>();
            }
        }

        if (tempList.Count > 0)
        {
            items.Add(tempList);
        }

        return items;
    }

    private string GetImageSizeCss(int cnt) => cnt == 1 ? "image-64" : "image-48";
}

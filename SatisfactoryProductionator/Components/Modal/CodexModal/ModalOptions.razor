@using SatisfactoryProductionator.Components.Modal.CodexModal.Options
@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Services;

@inject CodexModalState CodexModalState;

@implements IDisposable;

<div data-augmented-ui="tr-clip br-2-clip-y bl-clip border" class="options-wrapper">
    <div data-augmented-reset></div>
    <div data-augmented-ui="tl-clip tr-clip bl-clip border" class="options-inner">
        @if (selectedEntry == null)
        {
            <FillerOptions />
        }
        else if (selectedEntry.CodexEntry.CodexCategory is CodexCategory.Item)
        {
            <RecipeOptions />
        }
        else if (selectedEntry.CodexEntry.CodexCategory is CodexCategory.Infrastructure)
        {
            <MaterialOptions />
        }
        else
        {
            <FillerOptions />
        }
    </div>
</div>


@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
    }
}






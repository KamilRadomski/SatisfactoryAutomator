@using SatisfactoryProductionator.Components.Modal.CodexModal.Info
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services;
@using SatisfactoryProductionator.DataModels.Enums;

@inject CodexModalState CodexModalState;

@implements IDisposable;

<div data-augmented-ui-reset></div>

<div data-augmented-ui="tl-2-clip-y tr-2-clip-x br-clip bl-clip border" class="info-panel">
    <div data-augmented-reset></div>
    <div data-augmented-ui=" br-clip b-clip-x bl-clip border" class="info-panel-inner">
        <div data-augmented-ui-reset class="info-header">
            @if (selectedEntry == null)
            {
                <div class="header-text">-</div>
            }
            else
            {
                <div class="header-text">@selectedEntry.CodexEntry.DisplayName.FormatDisplayName()</div>
            }

            <EntryNavBar />
        </div>

        @if (selectedEntry == null)
        {
            <div class="header-text">No Item Selected</div>
        }
        else
        {
            <EntryInfo />
            <UnlockInfo />
        }
    </div>
</div>

@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
    }
}
@using SatisfactoryProductionator.Components.Modal.CodexModal.ExtraInfo
@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models.Modal;
@using SatisfactoryProductionator.Services.States;

@inject CodexModalState CodexModalState;

@implements IDisposable;

<div data-augmented-ui="tr-clip br-clip border" class="details">
    <div data-augmented-reset></div>
    <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="details-inner">
        @if (selectedEntry != null)
        {
            if (selectedEntry.CodexEntry.CodexCategory is CodexCategory.Item)
            {
                <RecipeExtraInfo />
            }
            else
            {
                <CostExtraInfo />
            }
        }
        else
        {
            <FillerExtraInfo />
        }
    </div>
</div>

@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
    }
}

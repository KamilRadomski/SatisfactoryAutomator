@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models.Modal;
@using SatisfactoryProductionator.Services.States;

@inject CodexModalState CodexModalState;

@implements IDisposable;

<div class="filler-text">
    <p>@GetFillerText()</p>
</div>

@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    public List<string> fillerTexts = new()
    {
        "The Factory Must Grow!",
        "Harvest It!",
        "Comply!"
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
    }

    public string GetFillerText()
    {
        var rnd = new Random().Next(0, fillerTexts.Count);

        return fillerTexts[rnd];
    }
}

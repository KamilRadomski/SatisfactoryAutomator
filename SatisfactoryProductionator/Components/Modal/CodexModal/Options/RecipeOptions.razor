@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Modal;
@using SatisfactoryProductionator.Services.States;

@inject CodexModalState CodexModalState;

@implements IDisposable;

@if(selectedEntry.CodexEntry.CodexItemType is CodexItemType.Ores)
{
    <FillerOptions />
}
else
{
    <div style="padding:20px; margin:10px;font-size:1.2rem;color: red;">
        <p> UNDER CONSTRUCTION</p>
        <p>Grapher and Permutator Options</p>
    </div>
}

@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
    }
}

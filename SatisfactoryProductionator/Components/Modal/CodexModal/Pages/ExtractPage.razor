@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models.Modal;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services;

@inject CodexModalState CodexModalState;
@inject CodexState CodexState;

@implements IDisposable

<table class="page-table">
    <tr>
        <td colspan="4" class="page-header">@selectedEntry.GetPageHeader().FormatCategoryName()</td>
    </tr>
    @foreach (var extraction in GetExtractions())
    {
        var buildingInfo = CodexState.FetchItem(extraction.Building);
        <tr>
            <td>
                <button class="image-button" type="button" @onclick="@(() => CodexModalState.SetSelectedItem(buildingInfo.ClassName))">
                    <img class="image-96" src=@buildingInfo.IconPath alt=@buildingInfo.DisplayName />
                    <div class="font-14 mt-0">@buildingInfo.DisplayName</div>
                </button>
            </td>
            <td> >>> </td>
            <td>
                <table>
                    <tr>
                        @{var i = 0;}
                        @foreach (var value in extraction.Rates)
                        {
                        <td>
                            <div class="extract-space">
                                <img class="image-64 @GetBackgroundColorCss(i++, extraction.Rates.Length)" src=@selectedEntry.CodexEntry.IconPath alt=@selectedEntry.CodexEntry.DisplayName />
                                <div class="font-12 mt-3">@value.ToString()/min</div>
                            </div>
                        </td>
                        }

                    </tr>
                </table>
            </td>
        </tr>
    }
</table>

@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
    }

    private List<Extraction> GetExtractions()
    {
        var output = selectedEntry.CodexEntry.CodexItemType is CodexItemType.Ores ? "Ore" : selectedEntry.CodexEntry.ClassName;

        return CodexState.FetchExtractions(output);
    }

    private string GetBackgroundColorCss(int i, int count)
    {
        if (count < 2) return string.Empty;

        return i switch
        {
            0 => "impure",
            1 => "normal",
            2 => "pure"
        };
    }
}

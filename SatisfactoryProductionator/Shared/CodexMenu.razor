@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Old;
@using SatisfactoryProductionator.DataParser;
@using SatisfactoryProductionator.Services;

@inject CodexState CodexState
@inject CodexMenuState CodexMenuState

<div data-augmented-ui-reset></div>

<div data-augmented-ui="tl-clip tr-2-clip-y br-clip bl-clip border" class="codex-menu">
    <div data-augmented-ui-reset>
        <div data-augmented-ui="tl-clip tr-2-clip-y br-clip bl-2-clip-x border" class="codex-sub-menu">
            <div data-augmented-ui-reset>
                <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="codex-sub-button codex-sub-u">
                    <button type="button" class="codex-sub-btn @activeU">
                        <div class="codex-sub-text codex-sub-text-u">Items</div>
                    </button>
                </div>
                <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip r-clip border" class="codex-sub-button codex-sub-l">
                    <button type="button" class="codex-sub-btn @activeL">
                        <div class="codex-sub-text codex-sub-text-l">Gear</div>
                    </button>
                </div>
                <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="codex-sub-button codex-sub-c">
                    <button type="button" class="codex-sub-btn @activeC">
                        <div class="codex-sub-text codex-sub-text-c">Buildings</div>
                    </button>
                </div>
                <div data-augmented-ui="tl-clip tr-clip-y br-clip bl-clip l-clip border" class="codex-sub-button codex-sub-r">
                    <button type="button" class="codex-sub-btn @activeR">
                        <div class="codex-sub-text codex-sub-text-r">Tiers</div>
                    </button>
                </div>
                <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip-x border" class="codex-sub-button codex-sub-d">
                    <button type="button" class="codex-sub-btn @activeD">
                        <div class="codex-sub-text codex-sub-text-d">Infrastructure</div>
                    </button>
                </div>
            </div>
        </div>
        <ul class="quick-nav-list">
            @foreach (var group in GroupItems())
            {
                <li class="quick-nav-list-item">
                    <button type="button" class="quick-nav-list-item-button" onclick="document.getElementById('@group.Key').scrollIntoView({behavior:'smooth'})">
                        <div class="quick-nav-list-item-button-text">@FormatCategoryName(group.Key.ToString()!)</div>
                    </button>
                </li>
            }
        </ul>
    </div>
</div>

@code {
    private static string activeU;
    private static string activeL;
    private static string activeC;
    private static string activeR;
    private static string activeD;


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        // SettingsState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;

        // _settings = SettingsState.Value ?? new AppSettings();

        if (CodexState.Codex == null)
        {
            await CodexState.InitializeCodexAsync();
        }
    }

    public void Dispose()
    {
        // SettingsState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
    }

    private static IEnumerable<IGrouping<CodexItemType?, ItemOld>> GroupItems() => DataAggregator.Items.OrderBy(x => x.Category).ThenBy(x => x.DisplayName).GroupBy(x => x.Category);

    private static string FormatCategoryName(string name)
    {
        for (int i = name.Length - 1; i > 0; i--)
        {
            if (char.IsUpper(name[i]))
            {
                name = name.Insert(i, ".");
            }
        }
        return name;
    }
}

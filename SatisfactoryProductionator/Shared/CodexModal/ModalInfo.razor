@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.Services;

@inject CodexModalState CodexModalState;

@implements IDisposable;

<div data-augmented-ui-reset></div>

<div data-augmented-ui="tl-2-clip-y tr-2-clip-x br-clip b-clip-x bl-clip border" class="info-panel-top">

    @* <div data-augmented-ui-reset class="info-panel-top-header">
        <div class="info-panel-top-header-name">@FormatDisplayName(_currentItem.DisplayName!)</div>
        @* <div class="info-panel-top-header-buttons">

            <div data-augmented-ui="all-hex border" class="info-panel-top-header-buttons-button">
                <button type="button" class="info-panel-top-header-buttons-clear" @onclick=@ClearInfoPanel>
                    <span class="info-panel-top-header-buttons-icon oi-trash" aria-hidden="true"></span>
                </button>
            </div>

            <div data-augmented-ui="all-hexangle-left border" class=@CssIsPreviousActive()>
                <button type="button" disabled=@IsDisplayPreviousInactive class="info-panel-top-header-buttons-nav" @onclick=@DisplayPrevious></button>
            </div>

            <div data-augmented-ui="all-hexangle-right border" class=@CssIsNextActive()>
                <button type="button" disabled=@IsDisplayNextInactive class="info-panel-top-header-buttons-nav" @onclick=@DisplayNext></button>
            </div>

            <div data-augmented-ui="all-hex border" class="info-panel-top-header-buttons-button">
                <button type="button" class="info-panel-top-header-buttons-close" @onclick=@CloseInfoPanel>
                    <span class="info-panel-top-header-buttons-icon oi-x" aria-hidden="true"></span>
                </button>
            </div>

        </div> *@
   @*  </div>

    <div class="info-panel-top-data">
        <img class="info-panel-top-data-image" src=@GetIconLocation(_currentItem.DisplayName!) alt=@_currentItem.DisplayName />
        <div class="info-panel-top-data-description">
            <p>@_currentItem.Description</p>
            @if (_currentItem.FormType == FormType.Solid)
            {
                <p>Stack.Size :: @_currentItem.StackSize</p>
            }
            @if (@_currentItem.EnergyValue > 0)
            {
                <p>MJ.Rating :: @_currentItem.EnergyValue</p>
            }
            @if (@_currentItem.ResourceSinkPoints > 0)
            {
                <p>Resource.Sink.Points :: @_currentItem.ResourceSinkPoints</p>
            }
            else
            {
                <p>Caution :: Cannot Sink!</p>
            }
        </div>
    </div> *@ 
</div>

@code {
    public CodexItem selectedItem { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
    }

    private static string FormatDisplayName(string name) => name.Replace(" - ", "-").Replace(" ", ".");
}

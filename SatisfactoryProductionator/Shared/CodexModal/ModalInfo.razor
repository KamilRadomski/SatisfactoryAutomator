@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services;
@using SatisfactoryProductionator.DataModels.Enums;

@inject CodexModalState CodexModalState;

@implements IDisposable;

<div data-augmented-ui-reset></div>

<div data-augmented-ui="tl-2-clip-y tr-2-clip-x br-clip b-clip-x bl-clip border" class="info-panel-top">
    <div data-augmented-ui-reset class="info-panel-top-header">

        @if(selectedEntry == null)
        {
            <div class="info-panel-top-header-name">-</div>
        }
        else
        {
            <div class="info-panel-top-header-name">@selectedEntry.CodexEntry.DisplayName.FormatDisplayName()</div>
        }
        <div class="info-panel-top-header-buttons">

            <div data-augmented-ui="all-hex border" class="info-panel-top-header-buttons-button">
                <button type="button" class="info-panel-top-header-buttons-clear" @onclick=@CodexModalState.ClearModal>
                    <span class="info-panel-top-header-buttons-icon oi-trash" aria-hidden="true"></span>
                </button>
            </div>

            <div data-augmented-ui="all-hexangle-left border" class=@IsPrevActiveCss()>
                <button type="button" disabled=@IsPrevDisabled() class="info-panel-top-header-buttons-nav" @onclick=@CodexModalState.DisplayPrevious></button>
            </div>

            <div data-augmented-ui="all-hexangle-right border" class=@IsNextActiveCss()>
                <button type="button" disabled=@IsNextDisabled() class="info-panel-top-header-buttons-nav" @onclick=@CodexModalState.DisplayNext></button>
            </div>

            <div data-augmented-ui="all-hex border" class="info-panel-top-header-buttons-button">
                <button type="button" class="info-panel-top-header-buttons-close" @onclick=@CodexModalState.CloseModal>
                    <span class="info-panel-top-header-buttons-icon oi-x" aria-hidden="true"></span>
                </button>
            </div>

        </div>

    </div>

     <div class="info-panel-top-data">
        @if(selectedEntry == null)
        {
            <div class="info-panel-top-header-name">No Item Selected</div>
        }
        else
        {


            <img class="info-panel-top-data-image" src=@selectedEntry.CodexEntry.IconPath alt=@selectedEntry.CodexEntry.DisplayName />
        <div class="info-panel-top-data-description">
                <p>@selectedEntry.CodexEntry.Description</p>

                @if (selectedEntry.CodexEntry.CodexCategory is CodexCategory.Item)
                {
                    var item = CastSelectedItem<Item>();

                    if (@item.FormType is FormType.Solid)
                    {
                        <p>Stack.Size :: @item.StackSize</p>
                    }
                    if (@item.EnergyValue > 0)
                    {
                        <p>MJ.Rating :: @item.EnergyValue</p>
                    }
                    if (@item.ResourceSinkPoints > 0)
                    {
                        <p>Resource.Sink.Points :: @item.ResourceSinkPoints</p>
                    }
                    else
                    {
                        <p>Caution :: Cannot Sink!</p>
                    }
                } 
            </div>
        }
    </div> 
</div>

@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get ; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
    }

    private T CastSelectedItem<T>() where T : CodexEntry => selectedEntry.CodexEntry as T;

    private string IsPrevActiveCss() => CodexModalState.BackStack.Count > 0 ? "info-panel-top-header-buttons-button" : "info-panel-top-header-buttons-button-inactive";

    private string IsNextActiveCss() => CodexModalState.FrontStack.Count > 0 ? "info-panel-top-header-buttons-button" : "info-panel-top-header-buttons-button-inactive";

    private bool IsPrevDisabled() => !(CodexModalState.BackStack.Count > 0);

    private bool IsNextDisabled() => !(CodexModalState.FrontStack.Count > 0);
}

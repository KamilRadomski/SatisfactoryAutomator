@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.Services;
@using SatisfactoryProductionator.Shared.CodexModal.Pages

@inject CodexModalState CodexModalState;

@implements IDisposable

<div data-augmented-ui="tl-clip tr-clip br-clip bl-2-clip-x r-clip-y border" class="info-panel-recipe">
    @if (selectedEntry == null)
    {
        <p class="info-panel-no-recipe-message"> - </p>
    }
    else
    {
        if (GetPageType() == CodexPageCategory.Recipe)
        {
            <RecipeInfoPage />
        }

        @if (GetPageCount() > 1)
        {
            <div data-augmented-ui-reset class="info-panel-recipe-paging">
                <div class="info-panel-recipe-paging-pages">
                    @for (var i = 0; i < GetPageCount(); i++)
                    {
                        <div class=@ParseCssPageLight(i)></div>
                    }
                </div>
                <div class="info-panel-recipe-paging-nav">
                    <button type="button" class="info-panel-recipe-paging-nav-button" @onclick=@InfoPageLeft>
                        <span class="info-panel-paging-nav-icon oi-caret-left" aria-hidden="true"></span>
                    </button>
                    <button type="button" class="info-panel-recipe-paging-nav-button" @onclick=@InfoPageRight>
                        <span class="info-panel-paging-nav-icon oi-caret-right" aria-hidden="true"></span>
                    </button>
                </div>
            </div>
        }
    }
</div>


@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    private RecipeType _currentRecipeType { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
    }

    private string FormatCategoryName(string name)
    {
        for (int i = name.Length - 1; i > 0; i--)
        {
            if (char.IsUpper(name[i]))
            {
                name = name.Insert(i, ".");
            }
        }
        return name;
    }

    private CodexPageCategory GetPageType()
    {
        var index = selectedEntry.Index;
        var page = selectedEntry.CodexItem.Pages[index];

        return page.Category;
    }

    private int GetPageCount()
    {
        return CodexModalState.GetPageCount();
    }

    private void InfoPageLeft()
    {
        CodexModalState.SetPageLeft();
    }

    private void InfoPageRight()
    {
        CodexModalState.SetPageRight();
    }

    private string ParseCssPageLight(int i) => selectedEntry.Index == i ? "info-panel-recipe-paging-pages-light info-panel-recipe-paging-pages-light-on" : "info-panel-recipe-paging-pages-light info-panel-recipe-paging-pages-light-off";

}

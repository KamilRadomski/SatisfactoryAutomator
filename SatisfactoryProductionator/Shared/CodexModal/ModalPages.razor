@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.Services;
@using SatisfactoryProductionator.Shared.CodexModal.Pages

@inject CodexModalState CodexModalState;

@implements IDisposable

<div data-augmented-ui="tl-clip tr-clip br-clip bl-2-clip-x r-clip-y border" class="info-panel-recipe">
    @if (selectedEntry == null)
    {
        <p class="info-panel-no-recipe-message"> - </p>
    }
    else
    {
        var pageType = GetPageType();

        if (pageType == PageType.Main ||
            pageType == PageType.ByProducts ||
            pageType == PageType.Inputs)
        {
            <RecipeInfoPage />
        }
        else if (pageType == PageType.Extraction)
        {
            <ExtractInfoPage />
        }
        else if (pageType == PageType.Cost)
        {
            <CostInfoPage />
        }
        else if (pageType == PageType.CompatibleItems)
        {
            <CompatibleItemsInfoPage />
        }
        else if (pageType == PageType.FuelRates)
        {
            <FuelUseInfoPage />
        }
        else if (pageType == PageType.Buildables ||
                 pageType == PageType.Craftables || 
                 pageType == PageType.Extractables)
        {
            <ProduceableInfoPage />
        }

        var pageCount = CodexModalState.GetPageCount();

        @if (pageCount > 1)
        {
            <div data-augmented-ui-reset class="info-panel-recipe-paging">
                <div class="info-panel-recipe-paging-pages">
                    @for (var i = 0; i < pageCount; i++)
                    {
                        <div class="pages-light @PageLightCss(i)"></div>
                    }
                </div>
                <div class="info-panel-recipe-paging-nav">
                    <button type="button" class="info-panel-recipe-paging-nav-button" @onclick=@(() => CodexModalState.SetPageLeft())>
                        <span class="info-panel-paging-nav-icon oi-caret-left" aria-hidden="true"></span>
                    </button>
                    <button type="button" class="info-panel-recipe-paging-nav-button" @onclick=@(() => CodexModalState.SetPageRight())>
                        <span class="info-panel-paging-nav-icon oi-caret-right" aria-hidden="true"></span>
                    </button>
                </div>
            </div>
        }
    }
</div>


@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
    }
   
    private PageType GetPageType()
    {
        var index = selectedEntry.Index;
        var page = selectedEntry.CodexItem.Pages[index];

        return page.PageType;
    }

    private string PageLightCss(int i) => selectedEntry.Index == i ? "light-on" : "light-off";

}

@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services;

@inject CodexModalState CodexModalState;
@inject CodexState CodexState;

@implements IDisposable

<table class="page-table">
    <tr>
        <td colspan="4" class="page-header">@GetPageType().ToString().FormatCategoryName()</td>
    </tr>
    @foreach (var recipe in GetRecipes())
    {
        var buildingInfo = GetBuildingInfo(@recipe.Building);
        <tr>
            <td>
                <button class="image-button" type="button" @onclick="@(() => SetSelectedItem(buildingInfo.ClassName))">
                    <img class="image-96" src=@buildingInfo.IconPath alt=@buildingInfo.DisplayName />
                    <div class="building-text">@buildingInfo.DisplayName</div>
                </button>
            </td>
            <td> >>> </td>
            <td>
                <table>
                    <tr>
                        @foreach (var item in recipe.Outputs.Values)
                        {
                            var i = 0;
                            foreach (var value in item)
                            {
                                <td>
                                    <div class="extract-space">
                                        <img class="image-64 @GetBackgroundColorCss(i++, item.Length)" src=@selectedEntry.CodexItem.IconPath alt=@selectedEntry.CodexItem.DisplayName />
                                        <div class="extract-quantity">@value.ToString()/min </div>
                                    </div>
                                </td>
                            }
                        }
                    </tr>
                </table>
            </td>
        </tr>
    }
</table>

@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
    }

    private List<Recipe> GetRecipes()
    {
        var index = selectedEntry.Index;
        var recipeNames = selectedEntry.CodexItem.Pages[index].Recipes;

        var recipes = CodexState.FetchRecipes(recipeNames);

        return recipes;
    }

    private PageType GetPageType()
    {
        var index = selectedEntry.Index;

        return selectedEntry.CodexItem.Pages[index].PageType;
    }

    private CodexItem GetBuildingInfo(string className)
    {
        return CodexState.FetchItem(className);
    }

    private void SetSelectedItem(string itemName)
    {
        var item = CodexState.FetchItem(itemName);
        CodexModalState.SetSelectedItem(item);
    }

    private string GetBackgroundColorCss(int i, int count)
    {
        if (count < 2) return string.Empty;

        return i switch
        {
            0 => "impure",
            1 => "normal",
            2 => "pure"
        };
    }
}

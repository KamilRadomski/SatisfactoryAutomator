@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Services;

@inject CodexModalState CodexModalState;
@inject CodexState CodexState;

@implements IDisposable

<table class="page-table w99">
    <tr>
        <td colspan="4" class="page-header">@FormatCategoryName(GetPageType().ToString())</td>
    </tr>
    <tr>
        <table class="flex-even">
            <tr class="flex-even w99">
                @{var recipe = GetRecipes().First();}
                @foreach(var item in recipe.Inputs)
                {
                    <td>
                        <button class="image-button cost-image" type="button" @onclick="@(() => SetSelectedItem(item.Key!))">
                            <img class="image-128" src=@GetIconLocation(item.Key) alt=@item.Key />
                            <div class="cost-quantity">X @Math.Round(item.Value[0], 2)</div>
                        </button>
                    </td>
                }
            </tr>
        </table>
    </tr>
</table>


@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
    }

    private void SetSelectedItem(string itemName)
    {
        var item = CodexState.FetchItem(itemName);
        CodexModalState.SetSelectedItem(item);
    }

    private string FormatCategoryName(string name)
    {
        for (int i = name.Length - 1; i > 0; i--)
        {
            if (char.IsUpper(name[i]))
            {
                name = name.Insert(i, ".");
            }
        }
        return name;
    }

    private List<Recipe> GetRecipes()
    {
        var index = selectedEntry.Index;
        var recipeNames = selectedEntry.CodexItem.Pages[index].Recipes;

        var recipes = CodexState.FetchRecipes(recipeNames);

        return recipes;
    }

    private PageType GetPageType()
    {
        var index = selectedEntry.Index;

        return selectedEntry.CodexItem.Pages[index].PageType;
    }

    private string GetIconLocation(string itemName)
    {
        var item = CodexState.FetchItem(itemName);

        return item.IconPath;
    }
}

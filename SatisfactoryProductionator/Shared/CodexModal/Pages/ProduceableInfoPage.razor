@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services;

@inject CodexModalState CodexModalState;
@inject CodexState CodexState;

@implements IDisposable

<table class="page-table w99">
    <tr>
        <td colspan="4" class="page-header w99">@selectedEntry.GetPageHeader().FormatCategoryName()</td>
    </tr>
    <tr>
        <td>
            @{
                var itemBundle = BundleItems();
            }
            <table class="w99">
                @foreach (var group in itemBundle)
                {
                    <tr class="flex-even w99">

                        @foreach (var item in group)
                        {
                            <td>
                                <button class="image-button mt-6" type="button" @onclick="@(() => CodexModalState.SetSelectedItem(item))">
                                    <img class="image-80" src=@CodexState.FetchIconPath(item) alt=@item />
                                    <div class="font-12 mt-4">@CodexState.FetchDisplayName(item)</div>
                                </button>
                            </td>
                        }
                    </tr>
                }
            </table>
        </td>
    </tr>
</table>


@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
    }

    private string GetItemName(string itemName)
    {
        var item = CodexState.FetchItem(itemName);

        return item.DisplayName;
    }

    private List<List<string>> BundleItems()
    {
        List<List<string>> items = new();

        var tempList = new List<string>();

        foreach (var entry in selectedEntry.GetEntries())
        {
            tempList.Add(entry);

            if (tempList.Count % 5 == 0)
            {
                items.Add(tempList);
                tempList = new List<string>();
            }
        }

        if (tempList.Count > 0)
        {
            items.Add(tempList);
        }

        return items;
    }
}

@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Services;

@inject CodexModalState CodexModalState;
@inject CodexState CodexState;

@implements IDisposable


<table class="info-panel-recipe-table">
    @{
        _currentRecipeType = RecipeType.Default;
    }
    @foreach (var recipe in GetRecipes())
    {
        if (_currentRecipeType == RecipeType.Default || (_currentRecipeType == RecipeType.Basic && recipe.RecipeType == RecipeType.Alternate ))
        {
            _currentRecipeType = recipe.RecipeType;
            <tr>
                <td colspan="4" class="info-panel-recipe-header">@FormatCategoryName(GetPageHeader(recipe))</td>
            </tr>
        }
        if(GetPageType() is not PageType.Extraction)
        {
            <tr>
                <td>
                    @if (recipe.RecipeType is RecipeType.Basic)
                    {
                        @* <div class=@CssIsDefault(recipe)> *@
                            <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="info-panel-recipe-name-basic">
                                <button type="button" class="info-panel-recipe-name-button">
                                @* <button type="button" class="info-panel-recipe-name-button" @onclick="@(() => SetRecipeDetails(recipe.DisplayName))"> *@
                                    @FormatDisplayName(recipe.DisplayName!)
                                </button>
                            </div>
                      @*   </div> *@
                    }
                    else
                    {
                        @* <div class=@CssIsDefault(recipe)> *@
                            <div data-augmented-ui="tl-2-clip-x tr-2-clip-x br-2-clip-x b-clip-x bl-2-clip-x border" class="info-panel-recipe-name-alternate">
                            <button type="button" class="info-panel-recipe-name-button">
                                @* <button type="button" class="info-panel-recipe-name-button" @onclick="@(() => SetRecipeDetails(recipe.DisplayName))"> *@
                                    @FormatDisplayName(recipe.DisplayName!)
                                </button>
                            </div>
                        @* </div> *@
                    }

                </td>
                <td>
                    <table>
                        <tr>
                            @foreach (var item in recipe.Inputs!)
                            {
                                <td>
                                    <button class="main-panel-category-button info-panel-recipe-button" type="button" @onclick="@(() => SetSelectedItem(item.Key!))">
                                        <img class="info-panel-recipe-image" src=@GetIconLocation(item.Key) alt=@item.Key />
                                        <div class="info-panel-recipe-quantity">@Math.Round(item.Value[1], 2)/min</div>
                                    </button>
                                </td>
                            }
                        </tr>
                    </table>
                </td>
                <td> >>> </td>
                <td>
                    <table>
                        <tr>
                            @foreach (var item in recipe.Outputs!)
                            {
                                <td>
                                    <button class="main-panel-category-button info-panel-recipe-button" type="button" @onclick="@(() => SetSelectedItem(@item.Key!))">
                                        <img class="info-panel-recipe-image" src=@GetIconLocation(item.Key) alt=@item.Key />
                                        <div class="info-panel-recipe-quantity">@Math.Round(item.Value[1], 2)/min</div>
                                    </button>
                                </td>
                            }
                        </tr>
                    </table>
                </td>
            </tr>
        }
        else //Extraction 
        {
            var buildingInfo = GetBuildingInfo(@recipe.Building);
            <tr>
                <td>
                    <button class="main-panel-category-button info-panel-recipe-button" type="button" @onclick="@(() => SetSelectedItem(buildingInfo.ClassName))">
                        <img class="building-image" src=@buildingInfo.IconPath alt=@buildingInfo.DisplayName />
                        <div class="info-panel-recipe-quantity">@buildingInfo.DisplayName</div>
                    </button>
                </td>
                <td> >>> </td> 
                <td>
                    <table>
                        <tr>
                            @foreach(var item in recipe.Outputs.Values)
                            {
                                var i = 0;
                                foreach (var value in item)
                                {
                                    <td>
                                        <div class="extract-space">
                                        <img class="extract-image @GetBackgroundColor(i++)" src=@selectedEntry.CodexItem.IconPath alt=@selectedEntry.CodexItem.DisplayName />
                                        <div class="info-panel-recipe-quantity">X @value.ToString()/min </div>
                                        </div>
                                    </td>
                                    
                                }
                            }
                        </tr>
                    </table>
                </td>
            </tr>
        }
    }
</table>

@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    private RecipeType _currentRecipeType { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
    }

    private string FormatDisplayName(string name) => name.Replace(" - ", "-").Replace(" ", ".");

    private List<Recipe> GetRecipes()
    {
        var index = selectedEntry.Index;
        var recipeNames = selectedEntry.CodexItem.Pages[index].Recipes;

        var recipes = CodexState.FetchRecipes(recipeNames);

        return recipes;
    }

    private string FormatCategoryName(string name)
    {
        for (int i = name.Length - 1; i > 0; i--)
        {
            if (char.IsUpper(name[i]))
            {
                name = name.Insert(i, ".");
            }
        }
        return name;
    }

    private string GetPageHeader(Recipe recipe)
    {
        var index = selectedEntry.Index;
        var page = selectedEntry.CodexItem.Pages[index];

        return page.PageType != PageType.Main ? page.PageType.ToString() : recipe.RecipeType.ToString();
    }

    private void SetSelectedItem(string itemName)
    {
        var item = CodexState.FetchItem(itemName);
        CodexModalState.SetSelectedItem(item);
    } 

    private string GetIconLocation(string itemName)
    {
        var item = CodexState.FetchItem(itemName);

        return item.IconPath;
    }

    private PageType GetPageType()
    {
        var index = selectedEntry.Index;

        return selectedEntry.CodexItem.Pages[index].PageType;

    }

    private CodexItem GetBuildingInfo(string className)
    {
        return CodexState.FetchItem(className);
    }

    private string GetBackgroundColor(int i)
    {
        return i switch
        {
        0 => "impure",
        1 => "normal",
        2 => "pure"
        };
    }

}

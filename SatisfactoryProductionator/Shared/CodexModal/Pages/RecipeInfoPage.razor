@using SatisfactoryProductionator.DataModels.Enums;
@using SatisfactoryProductionator.DataModels.Models.Codex;
@using SatisfactoryProductionator.DataModels.Models;
@using SatisfactoryProductionator.Extensions;
@using SatisfactoryProductionator.Services;

@inject CodexModalState CodexModalState;
@inject CodexState CodexState;

@implements IDisposable


<table class="page-table">
    @{
        _currentRecipeType = RecipeType.Default;
    }
    @foreach (var recipe in GetRecipes())
    {
        if (_currentRecipeType == RecipeType.Default || (GetPageType() is PageType.Main && _currentRecipeType == RecipeType.Basic && recipe.RecipeType == RecipeType.Alternate))
        {
            _currentRecipeType = recipe.RecipeType;
            <tr>
                <td colspan="4" class="page-header">@GetPageHeader(recipe).FormatCategoryName()</td>
            </tr>
        }

        <tr>
            <td>
                @if (recipe.RecipeType is RecipeType.Basic)
                {
                    @* <div class=@CssIsDefault(recipe)> *@
                    <div data-augmented-ui="tl-clip tr-clip br-clip bl-clip border" class="basic-recipe">
                        <button type="button" class="recipe-button">
                            @* <button type="button" class="info-panel-recipe-name-button" @onclick="@(() => SetRecipeDetails(recipe.DisplayName))"> *@
                            @recipe.DisplayName.FormatDisplayName()
                        </button>
                    </div>
                    @*   </div> *@
                }
                else
                {
                    @* <div class=@CssIsDefault(recipe)> *@
                    <div data-augmented-ui="tl-2-clip-x tr-2-clip-x br-2-clip-x b-clip-x bl-2-clip-x border" class="alt-recipe">
                        <button type="button" class="recipe-button">
                            @* <button type="button" class="info-panel-recipe-name-button" @onclick="@(() => SetRecipeDetails(recipe.DisplayName))"> *@
                            @recipe.DisplayName.FormatDisplayName()
                        </button>
                    </div>
                    @* </div> *@
                }

            </td>
            <td>
                <table>
                    <tr>
                        @foreach (var item in recipe.Inputs!)
                        {
                            <td>
                                <button class="image-button" type="button" @onclick="@(() => SetSelectedItem(item.Key!))">
                                    <img class="image-64" src=@GetIconLocation(item.Key) alt=@item.Key />
                                    <div class="recipe-quantity">@Math.Round(item.Value[1], 2)/min</div>
                                </button>
                            </td>
                        }
                    </tr>
                </table>
            </td>
            <td> >>> </td>
            <td>
                <table>
                    <tr>
                        @foreach (var item in recipe.Outputs!)
                        {
                            <td>
                                <button class="image-button" type="button" @onclick="@(() => SetSelectedItem(@item.Key!))">
                                    <img class="image-64" src=@GetIconLocation(item.Key) alt=@item.Key />
                                    <div class="recipe-quantity">@Math.Round(item.Value[1], 2)/min</div>
                                </button>
                            </td>
                        }
                    </tr>
                </table>
            </td>
        </tr>
    }
</table>

@code {
    [CascadingParameter(Name = "SelectedEntry")]
    public ModalEntry selectedEntry { get; set; }

    private RecipeType _currentRecipeType { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CodexModalState.OnStateChange += StateHasChanged;
        CodexState.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        CodexModalState.OnStateChange -= StateHasChanged;
        CodexState.OnStateChange -= StateHasChanged;
    }

    private List<Recipe> GetRecipes()
    {
        var index = selectedEntry.Index;
        var recipeNames = selectedEntry.CodexItem.Pages[index].Recipes;

        var recipes = CodexState.FetchRecipes(recipeNames);

        return recipes;
    }

    private string GetPageHeader(Recipe recipe)
    {
        var index = selectedEntry.Index;
        var page = selectedEntry.CodexItem.Pages[index];

        return page.PageType != PageType.Main ? page.PageType.ToString() : recipe.RecipeType.ToString();
    }

    private void SetSelectedItem(string itemName)
    {
        var item = CodexState.FetchItem(itemName);
        CodexModalState.SetSelectedItem(item);
    }

    private string GetIconLocation(string itemName)
    {
        var item = CodexState.FetchItem(itemName);

        return item.IconPath;
    }

    private PageType GetPageType()
    {
        var index = selectedEntry.Index;

        return selectedEntry.CodexItem.Pages[index].PageType;

    }
}
